/* tslint:disable */
/* eslint-disable */
/**
 * API开放平台 - version 1.0.0
 *
 *
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova'
import type { $$userConfigMap, alovaInstance } from '.'
import type apiDefinitions from './apiDefinitions'

type CollapsedAlova = typeof alovaInstance
type UserMethodConfigMap = typeof $$userConfigMap

type Alova2MethodConfig<Responded> =
	CollapsedAlova extends Alova<
		AlovaGenerics<
			any,
			any,
			infer RequestConfig,
			infer Response,
			infer ResponseHeader,
			infer L1Cache,
			infer L2Cache,
			infer SE
		>
	>
		? Omit<
				AlovaMethodCreateConfig<
					AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
					any,
					Responded
				>,
				'params'
			>
		: never

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
	DefinitionKey extends keyof typeof apiDefinitions,
	Default,
> = DefinitionKey extends keyof UserMethodConfigMap
	? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
		? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
		: Default
	: Default
type Alova2Method<
	Responded,
	DefinitionKey extends keyof typeof apiDefinitions,
	CurrentConfig extends Alova2MethodConfig<any>,
> =
	CollapsedAlova extends Alova<
		AlovaGenerics<
			any,
			any,
			infer RequestConfig,
			infer Response,
			infer ResponseHeader,
			infer L1Cache,
			infer L2Cache,
			infer SE
		>
	>
		? Method<
				AlovaGenerics<
					CurrentConfig extends undefined
						? ExtractUserDefinedTransformed<DefinitionKey, Responded>
						: CurrentConfig['transform'] extends (...args: any[]) => any
							? Awaited<ReturnType<CurrentConfig['transform']>>
							: ExtractUserDefinedTransformed<DefinitionKey, Responded>,
					any,
					RequestConfig,
					Response,
					ResponseHeader,
					L1Cache,
					L2Cache,
					SE
				>
			>
		: never

export type APP_ = {
	/**
	 * 文件主键
	 */
	fileId?: number
	/**
	 * 是否需要更新
	 */
	isNeedUpdate?: boolean
	/**
	 * 版本号
	 */
	versionCode?: string
	/**
	 * 版本描述
	 */
	versionDesc?: string
}
export type Result_APP_ = {
	code?: number
	/**
	 * APP更新信息
	 * ---
	 * APP更新信息
	 */
	data?: APP_
	message?: string
	msg?: string
	success?: boolean
}
export type Result = {
	code?: number
	data?: object
	message?: string
	msg?: string
	success?: boolean
}
export type OrderItem = {
	asc?: boolean
	column?: string
}
export type App__1 = {
	/**
	 * app描述
	 */
	appDesc?: string
	/**
	 * app主键
	 */
	appId?: number
	/**
	 * app名称
	 */
	appName?: string
	/**
	 * 包名
	 */
	packageName?: string
	/**
	 * 最新生产版本
	 */
	prodVersionNewest?: string
	/**
	 * 最新测试版本
	 */
	testVersionNewest?: string
}
export type Page_App_ = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: App__1[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_App_ = {
	code?: number
	/**
	 * Page«App信息»
	 * ---
	 */
	data?: Page_App_
	message?: string
	msg?: string
	success?: boolean
}
export type App_2 = {
	/**
	 * app主键
	 */
	appId?: number
	/**
	 * 文件主键
	 */
	fileId?: number
	/**
	 * 版本号
	 */
	versionCode?: string
	/**
	 * 版本描述
	 */
	versionDesc?: string
	/**
	 * test测试  pro生产
	 */
	versionType?: string
}
export type App_ = {
	/**
	 * app描述
	 */
	appDesc?: string
	/**
	 * app主键
	 */
	appId?: number
	/**
	 * app名称
	 */
	appName?: string
	/**
	 * 包名
	 */
	packageName?: string
	/**
	 * 最新生产版本
	 */
	prodVersionNewest?: string
	/**
	 * 最新测试版本
	 */
	testVersionNewest?: string
}
export type App_3 = {
	/**
	 * app主键
	 */
	appId?: number
	/**
	 * app版本主键
	 */
	appVersionId?: number
	/**
	 * 创建时间
	 */
	createTime?: string
	/**
	 * 文件主键
	 */
	fileId?: number
	/**
	 * 版本号
	 */
	versionCode?: string
	/**
	 * 版本描述
	 */
	versionDesc?: string
	/**
	 * test测试  prod生产
	 */
	versionType?: string
}
export type Result_App_ = {
	code?: number
	/**
	 * App版本信息
	 * ---
	 * App版本信息
	 */
	data?: App_3
	message?: string
	msg?: string
	success?: boolean
}
export type Page_App_2 = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: App_3[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_App_2 = {
	code?: number
	/**
	 * Page«App版本信息»
	 * ---
	 */
	data?: Page_App_2
	message?: string
	msg?: string
	success?: boolean
}
export type Result_boolean_ = {
	code?: number
	data?: boolean
	message?: string
	msg?: string
	success?: boolean
}
export type _44 = {
	/**
	 * 系统授权码
	 */
	authorizeCode?: string
	/**
	 * 到期日期
	 */
	expireDate?: string
}
export type Result_13 = {
	code?: number
	/**
	 * 系统授权码信息
	 * ---
	 */
	data?: _44
	message?: string
	msg?: string
	success?: boolean
}
export type __17 = {
	/**
	 * 系统授权码
	 */
	authorizeCode?: string
}
export type _41 = {
	/**
	 * 主键
	 */
	basedataId?: number
	/**
	 * 码值编码
	 */
	fieldCode?: string
	/**
	 * 码值名称
	 */
	fieldName?: string
	/**
	 * 排序号
	 */
	sortBy?: number
}
export type Result_List_10 = {
	code?: number
	data?: _41[]
	message?: string
	msg?: string
	success?: boolean
}
export type Map_string_string_ = Record<string, string>
export type Result_Map_string_List_Map_string_string_ = {
	code?: number
	data?: Record<string, Map_string_string_[]>
	message?: string
	msg?: string
	success?: boolean
}
export type _39 = {
	/**
	 * 主键
	 */
	basedataId?: number
	/**
	 * 码值类型外键
	 */
	basedataTypeId?: number
	/**
	 * 码值编码
	 */
	fieldCode?: string
	/**
	 * 码值名称
	 */
	fieldName?: string
	/**
	 * 排序号
	 */
	sortBy?: number
}
export type _40 = {
	/**
	 * 码值主键
	 */
	basedataId?: number
	/**
	 * 码值类型外键
	 */
	basedataTypeId?: number
	/**
	 * 码值编码
	 */
	fieldCode?: string
	/**
	 * 码值名称
	 */
	fieldName?: string
	/**
	 * 排序号
	 */
	sortBy?: number
}
export type Result_12 = {
	code?: number
	/**
	 * 码值数据信息
	 * ---
	 * 码值数据信息
	 */
	data?: _40
	message?: string
	msg?: string
	success?: boolean
}
export type Result_List_9 = {
	code?: number
	data?: _40[]
	message?: string
	msg?: string
	success?: boolean
}
export type _vo = {
	/**
	 * 主键
	 */
	basedataTypeId?: number
	/**
	 * 父码值主键
	 */
	parentId?: number
	/**
	 * 码值类型编码，与父码值field_code保持一致
	 */
	parentTypeCode?: string
	/**
	 * 码值类型名称
	 */
	parentTypeName?: string
	/**
	 * 码值类型编码，与父码值field_code保持一致
	 */
	typeCode?: string
	/**
	 * 码值类型名称
	 */
	typeName?: string
}
export type Result_vo_ = {
	code?: number
	/**
	 * 父类型集合vo
	 * ---
	 * 父类型集合vo
	 */
	data?: _vo
	message?: string
	msg?: string
	success?: boolean
}
export type _42 = {
	/**
	 * 主键
	 */
	basedataTypeId?: number
	/**
	 * 父码值主键
	 */
	parentId?: number
	/**
	 * 码值类型编码，与父码值field_code保持一致
	 */
	typeCode?: string
	/**
	 * 码值类型名称
	 */
	typeName?: string
}
export type Page_vo_ = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: _vo[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_vo_ = {
	code?: number
	/**
	 * Page«父类型集合vo»
	 * ---
	 */
	data?: Page_vo_
	message?: string
	msg?: string
	success?: boolean
}
export type Result_List_string_ = {
	code?: number
	data?: string[]
	message?: string
	msg?: string
	success?: boolean
}
export type _28 = {
	ids?: number[]
	networkSegment?: string
}
export type _ = {
	/**
	 * 创建时间
	 */
	createTime?: string
	/**
	 * 文件主键
	 */
	fileId?: number
	/**
	 * md5
	 */
	fileMd5?: string
	/**
	 * 源文件名称
	 */
	originName?: string
	/**
	 * 文件路径
	 */
	path?: string
	/**
	 * 大小
	 */
	size?: number
}
export type Result_List_ = {
	code?: number
	data?: _[]
	message?: string
	msg?: string
	success?: boolean
}
export type _48 = {
	/**
	 * 文件id(同时传递以id为准)
	 */
	fileId?: number
	/**
	 * 文件路径(同时传递以id为准)
	 */
	path?: string
	/**
	 * 标签信息
	 */
	tags?: Record<string, string>
}
export type _2 = {
	/**
	 * 文件列表
	 */
	fileIds?: number[]
	/**
	 * 压缩包名称
	 */
	zipFileName?: string
}
export type Result_ = {
	code?: number
	/**
	 * 上传文件信息
	 * ---
	 * 上传文件信息
	 */
	data?: _
	message?: string
	msg?: string
	success?: boolean
}
export type __1 = {
	/**
	 * md5
	 */
	fileMd5?: string
	/**
	 * 源文件名称
	 */
	originName?: string
	/**
	 * 文件路径
	 */
	path?: string
	/**
	 * 大小
	 */
	size?: number
	/**
	 * tag标签
	 */
	tags?: Record<string, string>
}
export type _url_ = {
	filePath?: string
	uploadUrl?: string
}
export type Result_url_ = {
	code?: number
	/**
	 * 文件上传url信息
	 * ---
	 */
	data?: _url_
	message?: string
	msg?: string
	success?: boolean
}
export type _31 = {
	/**
	 * 文件名称
	 */
	fileName?: string
	/**
	 * 是否存在
	 */
	isExist?: boolean
	/**
	 * 打包状态
	 */
	packageStatus?: boolean
	/**
	 * 大小（字节）
	 */
	size?: number
}
export type Result_9 = {
	code?: number
	/**
	 * 文件信息
	 * ---
	 * 文件信息
	 */
	data?: _31
	message?: string
	msg?: string
	success?: boolean
}
export type _30 = {
	filePath?: string
	originFileName?: string
}
export type _32 = {
	/**
	 * 业务id
	 */
	busId?: number
	/**
	 * 业务文件列表
	 */
	fileList?: _[]
	/**
	 * 业务模块
	 */
	module?: string
}
export type __15 = {
	/**
	 * 业务id
	 */
	busId?: number
	/**
	 * 业务文件列表
	 */
	fileIds?: number[]
	/**
	 * 业务模块
	 */
	module?: string
}
export type _27 = {
	/**
	 * 业务id
	 */
	busId?: number
	/**
	 * 业务文件列表
	 */
	fileList?: _[]
	/**
	 * 是否物理删除历史数据
	 */
	isPhysicallyRemove?: boolean
	/**
	 * 业务模块
	 */
	module?: string
}
export type _16 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 地理信息id
	 */
	geoId?: number
	/**
	 * 地理信息
	 */
	geometry?: string
}
export type Result_List_5 = {
	code?: number
	data?: _16[]
	message?: string
	msg?: string
	success?: boolean
}
export type Result_List_long_ = {
	code?: number
	data?: number[]
	message?: string
	msg?: string
	success?: boolean
}
export type __2 = {
	/**
	 * 要素键
	 */
	featureKey?: string
	/**
	 * 要素值
	 */
	featureValue?: string
}
export type __16 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 地理要素信息
	 */
	geometryFeatureInfos?: __2[]
	/**
	 * 组织id
	 */
	organizationId?: string
	/**
	 * 地理信息（wkt）
	 */
	wkt?: string
}
export type __14 = {
	/**
	 * 要素键
	 */
	featureKey?: string
	/**
	 * 要素值
	 */
	featureValue?: string
}
export type _34 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 附近距离
	 */
	distance?: number
	/**
	 * 地理要素信息
	 */
	geometryFeatureInfos?: __14[]
	/**
	 * 组织id
	 */
	organizationId?: string
	/**
	 * 地理信息（wkt）
	 */
	wkt?: string
}
export type RepeatDetectionResultVo = {
	distance?: number
	isRepeat?: boolean
	jobDetectionId?: number
}
export type Result_RepeatDetectionResultVo_ = {
	code?: number
	/**
	 * RepeatDetectionResultVo
	 * ---
	 */
	data?: RepeatDetectionResultVo
	message?: string
	msg?: string
	success?: boolean
}
export type RepeatDetectionResultParam = {
	detectionCode?: string
	error?: number
	jobWaylineIds?: number[]
	wkt?: string
}
export type __3 = {
	/**
	 * 要素键
	 */
	featureKey?: string
	/**
	 * 要素值
	 */
	featureValue?: string
}
export type _35 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 误差范围（单位m）
	 */
	errorRange?: number
	/**
	 * 地理要素信息
	 */
	geometryFeatureInfos?: __3[]
	/**
	 * 组织id
	 */
	organizationId?: string
	/**
	 * 地理信息（wkt）
	 */
	wkt?: string
}
export type RepeatInspectResultVo = {
	distance?: number
	resultId?: string
}
export type Result_List_RepeatInspectResultVo_ = {
	code?: number
	data?: RepeatInspectResultVo[]
	message?: string
	msg?: string
	success?: boolean
}
export type RepeatInspectResultParam = {
	detectionCode?: string
	error?: number
	itemCode?: string
	jobWaylineIds?: number[]
	wkt?: string
}
export type LocateGridVo = {
	govRegionId?: string
	skyGridCode?: string
	skyGridId?: number
	skyGridName?: string
}
export type Result_List_LocateGridVo_ = {
	code?: number
	data?: LocateGridVo[]
	message?: string
	msg?: string
	success?: boolean
}
export type LocateGridParam = {
	govRegionCode?: string
	organizationId?: string
	wtk?: string
}
export type _24 = {
	/**
	 * 场地编码
	 */
	placeCode?: string
	/**
	 * 产地主键
	 */
	placeId?: string
	/**
	 * 场地名称
	 */
	placeName?: string
	/**
	 * 场地类别主键
	 */
	placeTypeId?: string
}
export type Result_List_8 = {
	code?: number
	data?: _24[]
	message?: string
	msg?: string
	success?: boolean
}
export type LocatePlaceParam = {
	organizationId?: string
	placeTypeIds?: number[]
	wtk?: string
}
export type Result_long_ = {
	code?: number
	data?: number
	message?: string
	msg?: string
	success?: boolean
}
export type _21 = {
	/**
	 * 要素键
	 */
	featureKey?: string
	/**
	 * 要素名
	 */
	featureName?: string
	/**
	 * 要素值
	 */
	featureValue?: string
}
export type _15 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 地理信息id
	 */
	geoId?: number
	/**
	 * 地理信息
	 */
	geometry?: string
	/**
	 * 地理要素信息
	 */
	geometryFeatureInfos?: _21[]
	/**
	 * 是否追加要素信息
	 */
	isAppend?: boolean
	/**
	 * 组织id
	 */
	organizationId?: string
}
export type Result_List_double_ = {
	code?: number
	data?: number[]
	message?: string
	msg?: string
	success?: boolean
}
export type __13 = {
	/**
	 * 2维模型主键
	 */
	gis2dId?: number
	/**
	 * gis类型：1-影像 2-高程
	 */
	gisType?: string
	/**
	 * 1-图层 2-图层组
	 */
	layerType?: string
	/**
	 * 层级，顶级为1，一个组织只能有一个顶级节点
	 */
	level?: number
	/**
	 * 最大纬度
	 */
	maxLat?: number
	/**
	 * 最大经度
	 */
	maxLng?: number
	/**
	 * 最小纬度
	 */
	minLat?: number
	/**
	 * 最小经度
	 */
	minLng?: number
	/**
	 * 父节点主键
	 */
	parent2dId?: number
	/**
	 * 服务地址
	 */
	serviceAddress?: string
	/**
	 * 服务描述，对应图层摘要
	 */
	serviceDesc?: string
	/**
	 * 服务名称，对应图层标题
	 */
	serviceName?: string
	/**
	 * 服务参数
	 */
	serviceParam?: string
	/**
	 * 服务类别(model_service_type)
	 */
	serviceType?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
	/**
	 * 瓦片目录
	 */
	tileDirectory?: string
}
export type Result_List_3 = {
	code?: number
	data?: __13[]
	message?: string
	msg?: string
	success?: boolean
}
export type Result_double_ = {
	code?: number
	data?: number
	message?: string
	msg?: string
	success?: boolean
}
export type _9 = {
	/**
	 * 子节点
	 */
	childs?: _9[]
	/**
	 * 2维模型主键
	 */
	gis2dId?: number
	/**
	 * gis类型：1-影像 2-高程
	 */
	gisType?: string
	/**
	 * 1-图层 2-图层组
	 */
	layerType?: string
	/**
	 * 层级，顶级为1，一个组织只能有一个顶级节点
	 */
	level?: number
	/**
	 * 最大纬度
	 */
	maxLat?: number
	/**
	 * 最大经度
	 */
	maxLng?: number
	/**
	 * 最小纬度
	 */
	minLat?: number
	/**
	 * 最小经度
	 */
	minLng?: number
	/**
	 * 父节点主键
	 */
	parent2dId?: number
	/**
	 * 服务地址
	 */
	serviceAddress?: string
	/**
	 * 服务描述，对应图层摘要
	 */
	serviceDesc?: string
	/**
	 * 服务名称，对应图层标题
	 */
	serviceName?: string
	/**
	 * 服务参数
	 */
	serviceParam?: string
	/**
	 * 服务类别(model_service_type)
	 */
	serviceType?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
	/**
	 * 瓦片目录
	 */
	tileDirectory?: string
}
export type Result_List_4 = {
	code?: number
	data?: _9[]
	message?: string
	msg?: string
	success?: boolean
}
export type _8 = {
	/**
	 * 2维模型主键
	 */
	gis2dId?: number
	/**
	 * gis类型：1-影像 2-高程
	 */
	gisType?: string
	/**
	 * 1-图层 2-图层组
	 */
	layerType?: string
	/**
	 * 最大纬度
	 */
	maxLat?: number
	/**
	 * 最大经度
	 */
	maxLng?: number
	/**
	 * 最小纬度
	 */
	minLat?: number
	/**
	 * 最小经度
	 */
	minLng?: number
	/**
	 * 父节点主键
	 */
	parent2dId?: number
	/**
	 * 服务地址
	 */
	serviceAddress?: string
	/**
	 * 服务描述，对应图层摘要
	 */
	serviceDesc?: string
	/**
	 * 服务名称，对应图层标题
	 */
	serviceName?: string
	/**
	 * 服务参数
	 */
	serviceParam?: string
	/**
	 * 服务类别(model_service_type)
	 */
	serviceType?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
	/**
	 * 瓦片目录
	 */
	tileDirectory?: string
}
export type Result_3 = {
	code?: number
	/**
	 * 图层信息_1
	 * ---
	 * 图层信息
	 */
	data?: __13
	message?: string
	msg?: string
	success?: boolean
}
export type _26 = {
	/**
	 * 创建人名称
	 */
	createName?: string
	/**
	 * 创建时间
	 */
	createTime?: string
	/**
	 * 模型压缩包外键
	 */
	fileId?: number
	/**
	 * 三维模型主键
	 */
	gis3dId?: number
	/**
	 * 是否解压完成 0否 1是
	 */
	isUnzip?: boolean
	/**
	 * 操作人名称
	 */
	operateName?: string
	/**
	 * 操作时间
	 */
	operateTime?: string
	/**
	 * 实景描述
	 */
	realisticDesc?: string
	/**
	 * 实景名称
	 */
	realisticName?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
}
export type Result_8 = {
	code?: number
	/**
	 * 实景模型信息
	 * ---
	 * 实景模型信息
	 */
	data?: _26
	message?: string
	msg?: string
	success?: boolean
}
export type Page_4 = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: _26[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_4 = {
	code?: number
	/**
	 * Page«实景模型信息»
	 * ---
	 */
	data?: Page_4
	message?: string
	msg?: string
	success?: boolean
}
export type _25 = {
	/**
	 * 模型压缩包外键
	 */
	fileId?: number
	/**
	 * 三维模型主键
	 */
	gis3dId?: number
	/**
	 * 实景描述
	 */
	realisticDesc?: string
	/**
	 * 实景名称
	 */
	realisticName?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
}
export type ItemCodePlaceTypeVo = {
	itemCode?: string
	placeTypeId?: number
}
export type Result_List_ItemCodePlaceTypeVo_ = {
	code?: number
	data?: ItemCodePlaceTypeVo[]
	message?: string
	msg?: string
	success?: boolean
}
export type OrgIdAndItemCodesDto = {
	itemCodes?: string[]
	organizationId?: string
}
export type _13 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 相册集合
	 */
	fileList?: _[]
	/**
	 * 参照点位置gis
	 */
	geoId?: number
	/**
	 * 地理信息
	 */
	geometry?: string
	/**
	 * 地标主键
	 */
	landmarkId?: number
	/**
	 * 主图文件外键，相册存在公共文件关系表
	 */
	mainPicFileId?: number
	/**
	 * 参照点描述
	 */
	referencePointDesc?: string
	/**
	 * 参照点名称
	 */
	referencePointName?: string
	/**
	 * svg图标
	 */
	svgId?: number
}
export type Result_4 = {
	code?: number
	/**
	 * 地标信息
	 * ---
	 * 地标信息
	 */
	data?: _13
	message?: string
	msg?: string
	success?: boolean
}
export type _14 = {
	/**
	 * 最近地标gis
	 */
	closeGeoId?: number
	/**
	 * 地标距离（米）
	 */
	closeLandmarkDistance?: number
	/**
	 * 最近地标id
	 */
	closeLandmarkId?: number
	/**
	 * 最近地标名称
	 */
	closeLandmarkName?: string
	/**
	 * 最近地标图标
	 */
	closeLandmarkSvgId?: number
	/**
	 * 地理信息
	 */
	geometry?: string
}
export type Result_5 = {
	code?: number
	/**
	 * 地标定位信息
	 * ---
	 * 地标定位信息
	 */
	data?: _14
	message?: string
	msg?: string
	success?: boolean
}
export type Page_2 = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: _13[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_2 = {
	code?: number
	/**
	 * Page«地标信息»
	 * ---
	 */
	data?: Page_2
	message?: string
	msg?: string
	success?: boolean
}
export type _12 = {
	/**
	 * 相册集合
	 */
	fileList?: _[]
	/**
	 * 地理信息
	 */
	geometry?: string
	/**
	 * 地标主键
	 */
	landmarkId?: number
	/**
	 * 主图文件外键，相册存在公共文件关系表
	 */
	mainPicFileId?: number
	/**
	 * 参照点描述
	 */
	referencePointDesc?: string
	/**
	 * 参照点名称
	 */
	referencePointName?: string
	/**
	 * svg图标
	 */
	svgId?: number
}
export type _3 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 主键
	 */
	mapMarkId?: number
	/**
	 * 标记信息
	 */
	markJson?: string
}
export type Result_List_2 = {
	code?: number
	data?: _3[]
	message?: string
	msg?: string
	success?: boolean
}
export type Page_ = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: _3[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_ = {
	code?: number
	/**
	 * Page«公共地图标记信息»
	 * ---
	 */
	data?: Page_
	message?: string
	msg?: string
	success?: boolean
}
export type _5 = {
	/**
	 * 业务类型
	 */
	busiType?: string
}
export type _6 = {
	countId?: string
	current?: number
	/**
	 * 关键字
	 */
	keyword?: string
	maxLimit?: number
	optimizeCountSql?: boolean
	optimizeJoinOfCountSql?: boolean
	orders?: OrderItem[]
	/**
	 * 组织id
	 */
	organizationId?: string
	pages?: number
	/**
	 * 公共地图标记查询参数信息
	 * ---
	 * 公共地图标记查询参数信息
	 */
	param?: _5
	records?: _3[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type __12 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 主键
	 */
	mapMarkId?: number
	/**
	 * 标记信息
	 */
	markJson?: string
}
export type _4 = {
	/**
	 * 业务类型
	 */
	busId?: number
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 标记信息
	 */
	markJson?: string
}
export type Result_2 = {
	code?: number
	/**
	 * 公共地图标记信息
	 * ---
	 * 公共地图标记信息
	 */
	data?: _3
	message?: string
	msg?: string
	success?: boolean
}
export type ItemInfo = {
	/**
	 * sh事件外键
	 */
	inspectItemId?: number
	/**
	 * 事件编码
	 */
	itemCode?: string
}
export type PlaceFieldDefineSaveInfo = {
	/**
	 * 码值类型编码，属性为下拉框时不为空
	 */
	basedataTypeCode?: string
	/**
	 * 对象属性定义主键
	 */
	fieldDefineId?: number
	/**
	 * 属性名称
	 */
	fieldName?: string
	/**
	 * 属性类型：number-数字、string-字符串、select-下拉框（码值）、date-日期、time-时间、date-time-日期时间
	 */
	fieldType?: string
	/**
	 * 是否必填，1-是 0-否
	 */
	isNeed?: number
	/**
	 * 是否单选，1-是 0-否，属性为下拉框时不为空
	 */
	isSingle?: number
}
export type PlaceTypeDto = {
	/**
	 * 事件信息
	 */
	itemInfos?: ItemInfo[]
	/**
	 * 定位误差（米）
	 */
	locateDistance?: number
	/**
	 * 属性定义保存信息
	 */
	placeFieldDefineSaveInfos?: PlaceFieldDefineSaveInfo[]
	/**
	 * 标的类别编码
	 */
	placeTypeCode?: string
	/**
	 * 标的类别标记颜色（RGB）
	 */
	placeTypeColor?: string
	/**
	 * 标的类别描述
	 */
	placeTypeDesc?: string
	/**
	 * 标的类别主键
	 */
	placeTypeId?: number
	/**
	 * 标的类别名称
	 */
	placeTypeName?: string
}
export type Result_PlaceTypeDto_ = {
	code?: number
	/**
	 * PlaceTypeDto
	 * ---
	 */
	data?: PlaceTypeDto
	message?: string
	msg?: string
	success?: boolean
}
export type PlaceTypePageVo = {
	/**
	 * 定位误差（米）
	 */
	locateDistance?: number
	/**
	 * 场地数量
	 */
	placeCount?: number
	/**
	 * 标的类别编码
	 */
	placeTypeCode?: string
	/**
	 * 标的类别标记颜色（RGB）
	 */
	placeTypeColor?: string
	/**
	 * 标的类别描述
	 */
	placeTypeDesc?: string
	/**
	 * 标的类别主键
	 */
	placeTypeId?: number
	/**
	 * 标的类别名称
	 */
	placeTypeName?: string
}
export type IPage_PlaceTypePageVo_ = {
	current?: number
	pages?: number
	records?: PlaceTypePageVo[]
	size?: number
	total?: number
}
export type Result_IPage_PlaceTypePageVo_ = {
	code?: number
	/**
	 * IPage«PlaceTypePageVo»
	 * ---
	 */
	data?: IPage_PlaceTypePageVo_
	message?: string
	msg?: string
	success?: boolean
}
export type PlaceGeometryVo = {
	/**
	 * 边界信息GIS，存储多边形或带状线信息
	 */
	geoId?: number
	/**
	 * 边界地理信息
	 */
	geometry?: string
	/**
	 * 内点或圆心
	 */
	inwardPointGeoId?: number
	/**
	 * 内点或圆心地理信息
	 */
	inwardPointGeometry?: string
	/**
	 * 主图文件外键，相册存在公共文件关系表
	 */
	mainPicFileId?: number
	/**
	 * 标的编码
	 */
	placeCode?: string
	/**
	 * 标的描述
	 */
	placeDesc?: string
	/**
	 * 场地主键
	 */
	placeId?: number
	/**
	 * 标的名称
	 */
	placeName?: string
	/**
	 * 对象形状，polygon-多边形 banding-带状 circle-圆形
	 */
	placeShape?: string
	/**
	 * 标的类型外键
	 */
	placeTypeId?: number
	/**
	 * 半径或带状宽度 (米)
	 */
	width?: number
}
export type Result_List_PlaceGeometryVo_ = {
	code?: number
	data?: PlaceGeometryVo[]
	message?: string
	msg?: string
	success?: boolean
}
export type PlaceFieldValueInfo = {
	/**
	 * 属性定义外键
	 */
	fieldDefineId?: number
	/**
	 * 属性值
	 */
	fieldValue?: string
}
export type PlaceDto = {
	/**
	 * 相册集合
	 */
	fileList?: _[]
	/**
	 * 边界地理信息
	 */
	geometry?: string
	/**
	 * 内点或圆心地理信息
	 */
	inwardPointGeometry?: string
	/**
	 * 主图文件外键，相册存在公共文件关系表
	 */
	mainPicFileId?: number
	/**
	 * 标的编码
	 */
	placeCode?: string
	/**
	 * 标的描述
	 */
	placeDesc?: string
	/**
	 * 属性值信息
	 */
	placeFieldValueInfos?: PlaceFieldValueInfo[]
	/**
	 * 场地主键
	 */
	placeId?: number
	/**
	 * 标的名称
	 */
	placeName?: string
	/**
	 * 对象形状，polygon-多边形 banding-带状 circle-圆形
	 */
	placeShape?: string
	/**
	 * 标的类型外键
	 */
	placeTypeId?: number
	/**
	 * 半径或带状宽度 (米)
	 */
	width?: number
}
export type Result_PlaceDto_ = {
	code?: number
	/**
	 * PlaceDto
	 * ---
	 */
	data?: PlaceDto
	message?: string
	msg?: string
	success?: boolean
}
export type PlaceVo = {
	/**
	 * 边界信息GIS，存储多边形或带状线信息
	 */
	geoId?: number
	/**
	 * 内点或圆心
	 */
	inwardPointGeoId?: number
	/**
	 * 主图文件外键，相册存在公共文件关系表
	 */
	mainPicFileId?: number
	/**
	 * 标的编码
	 */
	placeCode?: string
	/**
	 * 标的描述
	 */
	placeDesc?: string
	/**
	 * 场地主键
	 */
	placeId?: number
	/**
	 * 标的名称
	 */
	placeName?: string
	/**
	 * 对象形状，polygon-多边形 banding-带状 circle-圆形
	 */
	placeShape?: string
	/**
	 * 标的类别标记颜色（RGB）
	 */
	placeTypeColor?: string
	/**
	 * 标的类型外键
	 */
	placeTypeId?: number
	/**
	 * 半径或带状宽度 (米)
	 */
	width?: number
}
export type Page_PlaceVo_ = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: PlaceVo[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_PlaceVo_ = {
	code?: number
	/**
	 * Page«PlaceVo»
	 * ---
	 */
	data?: Page_PlaceVo_
	message?: string
	msg?: string
	success?: boolean
}
export type LocateNearestPlaceVo = {
	/**
	 * 距离
	 */
	distance?: number
	/**
	 * 定位误差（米）
	 */
	locateDistance?: number
	/**
	 * 场地编码
	 */
	placeCode?: string
	/**
	 * 场地id
	 */
	placeId?: string
	/**
	 * 场地名称
	 */
	placeName?: string
	/**
	 * 场地类别编码
	 */
	placeTypeCode?: string
	/**
	 * 场地类别名称
	 */
	placeTypeName?: string
}
export type Result_LocateNearestPlaceVo_ = {
	code?: number
	/**
	 * LocateNearestPlaceVo
	 * ---
	 */
	data?: LocateNearestPlaceVo
	message?: string
	msg?: string
	success?: boolean
}
export type LocateNearestPlaceParam = {
	itemCode?: string
	organizationId?: string
	wkt?: string
}
export type PlacePageVo = {
	/**
	 * 边界信息GIS，存储多边形或带状线信息
	 */
	geoId?: number
	/**
	 * 内点或圆心
	 */
	inwardPointGeoId?: number
	/**
	 * 主图文件外键，相册存在公共文件关系表
	 */
	mainPicFileId?: number
	/**
	 * 标的编码
	 */
	placeCode?: string
	/**
	 * 标的描述
	 */
	placeDesc?: string
	/**
	 * 场地主键
	 */
	placeId?: number
	/**
	 * 标的名称
	 */
	placeName?: string
	/**
	 * 对象形状，polygon-多边形 banding-带状 circle-圆形
	 */
	placeShape?: string
	/**
	 * 标的类型外键
	 */
	placeTypeId?: number
	/**
	 * 半径或带状宽度 (米)
	 */
	width?: number
}
export type IPage_PlacePageVo_ = {
	current?: number
	pages?: number
	records?: PlacePageVo[]
	size?: number
	total?: number
}
export type Result_IPage_PlacePageVo_ = {
	code?: number
	/**
	 * IPage«PlacePageVo»
	 * ---
	 */
	data?: IPage_PlacePageVo_
	message?: string
	msg?: string
	success?: boolean
}
export type _10 = {
	/**
	 * 地区或城市所属一级行政区域
	 */
	adm1?: string
	/**
	 * 地区或城市的上级行政区划名称
	 */
	adm2?: string
	/**
	 * 地区或城市所属国家名称
	 */
	country?: string
	/**
	 * 该地区的天气预报网页链接，便于嵌入你的网站或应用
	 */
	fxLink?: string
	/**
	 * 地区或城市ID
	 */
	id?: string
	/**
	 * 地区或城市是否当前处于夏令时。1 表示当前处于夏令时，0 表示当前不是夏令时
	 */
	isDst?: string
	/**
	 * 地区或城市纬度
	 */
	lat?: string
	/**
	 * 地区或城市经度
	 */
	lon?: string
	/**
	 * 地区或城市名称
	 */
	name?: string
	/**
	 * 地区评分
	 */
	rank?: string
	/**
	 * 地区或城市的属性
	 */
	type?: string
	/**
	 * 地区或城市所在时区
	 */
	tz?: string
	/**
	 * 地区或城市目前与UTC时间偏移的小时数
	 */
	utcOffset?: string
}
export type _29 = {
	/**
	 * 云量，百分比数值。可能为空
	 */
	cloud?: string
	/**
	 * 露点温度。可能为空
	 */
	dew?: string
	/**
	 * 体感温度，默认单位：摄氏度
	 */
	feelsLike?: string
	/**
	 * 相对湿度，百分比数值
	 */
	humidity?: string
	/**
	 * 天气状况的图标代码
	 */
	icon?: string
	/**
	 * 数据观测时间
	 */
	obsTime?: string
	/**
	 * 当前小时累计降水量，默认单位：毫米
	 */
	precip?: string
	/**
	 * 大气压强，默认单位：百帕
	 */
	pressure?: string
	/**
	 * 温度，默认单位：摄氏度
	 */
	temp?: string
	/**
	 * 天气状况的文字描述，包括阴晴雨雪等天气状态的描述
	 */
	text?: string
	/**
	 * 能见度，默认单位：公里
	 */
	vis?: string
	/**
	 * 风向360角度
	 */
	wind360?: string
	/**
	 * 风向
	 */
	windDir?: string
	/**
	 * 风力等级
	 */
	windScale?: string
	/**
	 * 风速，公里/小时
	 */
	windSpeed?: string
}
export type _33 = {
	/**
	 * 数据许可或版权声明，可能为空
	 */
	license?: string[]
	/**
	 * 原始数据来源，或数据源说明，可能为空
	 */
	sources?: string[]
}
export type _23 = {
	/**
	 * 状态码
	 */
	code?: string
	/**
	 * 当前数据的响应式页面，便于嵌入网站或应用
	 */
	fxLink?: string
	/**
	 * 数据信息
	 * ---
	 * 数据信息
	 */
	now?: _29
	/**
	 * 来源信息
	 * ---
	 * 来源信息
	 */
	refer?: _33
	/**
	 * 当前API的最近更新时间
	 */
	updateTime?: string
}
export type _22 = {
	/**
	 * 地区或城市信息
	 * ---
	 * 地区或城市信息
	 */
	location?: _10
	/**
	 * 城市天气结果
	 * ---
	 * 城市天气结果
	 */
	weatherNow?: _23
}
export type Result_List_7 = {
	code?: number
	data?: _22[]
	message?: string
	msg?: string
	success?: boolean
}
export type Result_7 = {
	code?: number
	/**
	 * 城市天气
	 * ---
	 * 城市天气
	 */
	data?: _22
	message?: string
	msg?: string
	success?: boolean
}
export type _47 = {
	/**
	 * 中心点
	 */
	restrictedFlyZoneCenterPoint?: string
	/**
	 * 文件id
	 */
	restrictedFlyZoneFileId?: string
	/**
	 * 半径
	 */
	restrictedFlyZoneRadius?: string
	/**
	 * 更新时间
	 */
	restrictedFlyZoneUpdateTime?: string
}
export type Result_15 = {
	code?: number
	/**
	 * 系统设置详细信息
	 * ---
	 * 系统设置详细信息
	 */
	data?: _47
	message?: string
	msg?: string
	success?: boolean
}
export type _dto = {
	/**
	 * 配置编码
	 */
	settingCode?: string
	/**
	 * 配置值
	 */
	val?: string
}
export type Result_Map_string_object_ = {
	code?: number
	data?: object
	message?: string
	msg?: string
	success?: boolean
}
export type _11 = {
	/**
	 * 业务id
	 */
	busiId?: number
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 模型主键
	 */
	gisModelId?: number
}
export type _18 = {
	/**
	 * 需求单位级联ID
	 */
	cascadeDeptId?: string
	/**
	 * 需求单位编码(other表示其他)
	 */
	demandUnitCode?: string
	/**
	 * 需求单位名称
	 */
	demandUnitName?: string
	/**
	 * 模型主键
	 */
	gisModelId?: number
	/**
	 * 最大纬度
	 */
	maxLat?: number
	/**
	 * 最大经度
	 */
	maxLng?: number
	/**
	 * 最小纬度
	 */
	minLat?: number
	/**
	 * 最小经度
	 */
	minLng?: number
	/**
	 * 模型名称
	 */
	modelName?: string
	/**
	 * 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
	 */
	modelType?: string
	/**
	 * 原始模型主键
	 */
	originModelId?: number
	/**
	 * 服务地址
	 */
	serviceAddress?: string
	/**
	 * 服务描述，对应图层摘要
	 */
	serviceDesc?: string
	/**
	 * 服务参数
	 */
	serviceParam?: string
	/**
	 * 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
	 */
	serviceType?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
	/**
	 * 瓦片目录
	 */
	tileDirectory?: string
	/**
	 * 工单外键
	 */
	workOrderId?: number
	/**
	 * 压缩包异常描述
	 */
	zipErrorDesc?: string
	/**
	 * 上传压缩包外键
	 */
	zipFileId?: number
	/**
	 * 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
	 */
	zipFileStatus?: string
}
export type Result_List_6 = {
	code?: number
	data?: _18[]
	message?: string
	msg?: string
	success?: boolean
}
export type Result_6 = {
	code?: number
	/**
	 * 地理模型信息
	 * ---
	 */
	data?: _18
	message?: string
	msg?: string
	success?: boolean
}
export type _36 = {
	/**
	 * 桶名称
	 */
	bucket?: string
	/**
	 * 2d文件路径前缀
	 */
	objectKey2dPrefix?: string
	/**
	 * 3d文件路径前缀
	 */
	objectKey3dPrefix?: string
	/**
	 * 高层文件路径前缀
	 */
	objectKeyElevationPrefix?: string
	/**
	 * obj文件路径前缀
	 */
	objectKeyObjPrefix?: string
	/**
	 * tif文件路径前缀
	 */
	objectKeyTifPrefix?: string
	/**
	 * oss服务路径
	 */
	ossEndpoint?: string
	/**
	 * 代理路径
	 */
	proxyPath?: string
}
export type Result_10 = {
	code?: number
	/**
	 * 模型文件配置信息
	 * ---
	 * 模型文件配置信息
	 */
	data?: _36
	message?: string
	msg?: string
	success?: boolean
}
export type _20 = {
	/**
	 * 模型主键
	 */
	gisModelId?: number
	/**
	 * 模型名称
	 */
	modelName?: string
	/**
	 * 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
	 */
	modelType?: string
	/**
	 * 原始模型主键
	 */
	originModelId?: number
	/**
	 * 服务描述，对应图层摘要
	 */
	serviceDesc?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
	/**
	 * 工单外键
	 */
	workOrderId?: number
	/**
	 * 上传压缩包外键
	 */
	zipFileId?: number
}
export type Page_3 = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: _18[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_3 = {
	code?: number
	/**
	 * Page«地理模型信息»
	 * ---
	 */
	data?: Page_3
	message?: string
	msg?: string
	success?: boolean
}
export type _19 = {
	/**
	 * 是否原始图层
	 */
	isOriginModel?: boolean
	/**
	 * 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
	 */
	modelTypes?: string[]
	/**
	 * 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
	 */
	serviceTypes?: string[]
	/**
	 * 工单外键
	 */
	workOrderId?: number
	/**
	 * 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
	 */
	zipFileStatus?: string
}
export type _7 = {
	countId?: string
	current?: number
	/**
	 * 关键字
	 */
	keyword?: string
	maxLimit?: number
	optimizeCountSql?: boolean
	optimizeJoinOfCountSql?: boolean
	orders?: OrderItem[]
	/**
	 * 组织id
	 */
	organizationId?: string
	pages?: number
	/**
	 * 地理模型分页参数信息
	 * ---
	 */
	param?: _19
	records?: _18[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type _17 = {
	/**
	 * 模型主键
	 */
	gisModelId?: number
	/**
	 * 最大纬度
	 */
	maxLat?: number
	/**
	 * 最大经度
	 */
	maxLng?: number
	/**
	 * 最小纬度
	 */
	minLat?: number
	/**
	 * 最小经度
	 */
	minLng?: number
	/**
	 * 模型名称
	 */
	modelName?: string
	/**
	 * 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
	 */
	modelType?: string
	/**
	 * 原始模型主键
	 */
	originModelId?: number
	/**
	 * 服务地址
	 */
	serviceAddress?: string
	/**
	 * 服务描述，对应图层摘要
	 */
	serviceDesc?: string
	/**
	 * 服务参数
	 */
	serviceParam?: string
	/**
	 * 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
	 */
	serviceType?: string
	/**
	 * 拍摄日期
	 */
	shootDate?: string
	/**
	 * 瓦片目录
	 */
	tileDirectory?: string
	/**
	 * 工单外键
	 */
	workOrderId?: number
}
export type Svg_ = {
	/**
	 * 默认颜色
	 */
	defaultColor?: string
	/**
	 * 默认高度
	 */
	defaultHeight?: number
	/**
	 * 默认宽度
	 */
	defaultWidth?: number
	/**
	 * svg主键
	 */
	svgId?: number
	/**
	 * svg名称
	 */
	svgName?: string
	/**
	 * svg内容path
	 */
	svgPath?: string
	/**
	 * svg类型外键
	 */
	svgTypeId?: number
}
export type Result_Svg_ = {
	code?: number
	/**
	 * Svg信息
	 * ---
	 * svg图标信息
	 */
	data?: Svg_
	message?: string
	msg?: string
	success?: boolean
}
export type Page_Svg_ = {
	countId?: string
	current?: number
	maxLimit?: number
	optimizeCountSql?: boolean
	orders?: OrderItem[]
	pages?: number
	records?: Svg_[]
	searchCount?: boolean
	size?: number
	total?: number
}
export type Result_Page_Svg_ = {
	code?: number
	/**
	 * Page«Svg信息»
	 * ---
	 */
	data?: Page_Svg_
	message?: string
	msg?: string
	success?: boolean
}
export type SvgType_ = {
	/**
	 * svg类型主键
	 */
	svgTypeId?: number
	/**
	 * svg类型名称
	 */
	svgTypeName?: string
}
export type Result_List_SvgType_ = {
	code?: number
	data?: SvgType_[]
	message?: string
	msg?: string
	success?: boolean
}
export type _45 = {
	/**
	 * 操作人
	 */
	createName?: string
	/**
	 * 操作时间
	 */
	createTime?: string
	/**
	 * 异常信息
	 */
	exception?: string
	/**
	 * 执行时间
	 */
	executeTime?: number
	/**
	 * 主键
	 */
	logId?: number
	/**
	 * 日志类型
	 */
	logType?: string
	/**
	 * 操作方式
	 */
	method?: string
	/**
	 * 操作提交的数据
	 */
	params?: string
	/**
	 * 备注
	 */
	remark?: string
	/**
	 * 操作IP地址
	 */
	remoteAddr?: string
	/**
	 * 请求URI
	 */
	requestUri?: string
	/**
	 * 日志标题
	 */
	title?: string
	/**
	 * 用户代理
	 */
	userAgent?: string
}
export type Result_14 = {
	code?: number
	/**
	 * 系统日志详细信息
	 * ---
	 */
	data?: _45
	message?: string
	msg?: string
	success?: boolean
}
export type _46 = {
	/**
	 * 操作人
	 */
	createName?: string
	/**
	 * 操作时间
	 */
	createTime?: string
	/**
	 * 执行时间
	 */
	executeTime?: number
	/**
	 * id
	 */
	logId?: number
	/**
	 * 日志类型
	 */
	logType?: string
	/**
	 * 操作方式
	 */
	method?: string
	/**
	 * 操作提交的数据
	 */
	params?: string
	/**
	 * 操作IP地址
	 */
	remoteAddr?: string
	/**
	 * 请求URI
	 */
	requestUri?: string
	/**
	 * 日志标题
	 */
	title?: string
	/**
	 * 用户代理
	 */
	userAgent?: string
}
export type IPage_ = {
	current?: number
	pages?: number
	records?: _46[]
	size?: number
	total?: number
}
export type Result_IPage_ = {
	code?: number
	/**
	 * IPage«系统日志集合»
	 * ---
	 */
	data?: IPage_
	message?: string
	msg?: string
	success?: boolean
}
export type SystemLogSaveDto = {
	createId?: number
	createName?: string
	createTime?: string
	deptId?: number
	exception?: string
	executeTime?: number
	isDeleted?: number
	logType?: string
	method?: string
	params?: string
	remark?: string
	remoteAddr?: string
	requestUri?: string
	title?: string
	userAgent?: string
}
export type TestDto = {
	param1?: string
	param2?: string
}
export type _43 = {
	/**
	 * 文件id列表
	 */
	fileIds?: number[]
	/**
	 * 是否物理删除
	 */
	isPhysicallyRemove?: boolean
	/**
	 * path模糊查询字段
	 */
	pathLikeStr?: string
}
export type _38 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 偏好主键
	 */
	preferencesId?: number
	/**
	 * 偏好信息
	 */
	preferencesInfo?: string
	/**
	 * 用户外键
	 */
	userId?: number
}
export type Result_11 = {
	code?: number
	/**
	 * 用户偏好设置信息
	 * ---
	 * 用户偏好设置信息
	 */
	data?: _38
	message?: string
	msg?: string
	success?: boolean
}
export type _37 = {
	/**
	 * 业务类型
	 */
	busiType?: string
	/**
	 * 偏好信息
	 */
	preferencesInfo?: string
}
export type WebSocket_string_2 = {
	biz_code?: string
	/**
	 * 消息内容
	 */
	data?: string
	timestamp?: number
	version?: string
}
export type WebSocket_string_ = {
	/**
	 * 发送目标主题
	 */
	destination?: string
	/**
	 * WebSocket消息信息«string»
	 * ---
	 * WebSocket消息信息
	 */
	message?: WebSocket_string_2
	/**
	 * 发送目标工作空间
	 */
	organizationIds?: string[]
	/**
	 * 发送目标用户id
	 */
	userIds?: number[]
	/**
	 * 发送类型
	 */
	wsSendType?: string
}
export type TestJson = {
	data?: object
}
declare global {
	interface BaseApis {
		app: {
			/**
			 * ---
			 *
			 * [GET] APP检查更新
			 *
			 * **path:** /api/app/checkAppUpdate
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 包名
			 *   packageName?: string
			 *   // 版本号
			 *   versionCode?: string
			 *   // test测试  pro生产
			 *   versionType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] APP更新信息
			 *   // APP更新信息
			 *   data?: {
			 *     // 文件主键
			 *     fileId?: number
			 *     // 是否需要更新
			 *     isNeedUpdate?: boolean
			 *     // 版本号
			 *     versionCode?: string
			 *     // 版本描述
			 *     versionDesc?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAppCheckAppUpdate<
				Config extends Alova2MethodConfig<Result_APP_> & {
					params: {
						/**
						 * 包名
						 */
						packageName?: string
						/**
						 * 版本号
						 */
						versionCode?: string
						/**
						 * test测试  pro生产
						 */
						versionType?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_APP_, 'app.getApiAppCheckAppUpdate', Config>
			/**
			 * ---
			 *
			 * [GET] 通过id删除APP
			 *
			 * **path:** /api/app/delById/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAppDelById<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'app.getApiAppDelById', Config>
			/**
			 * ---
			 *
			 * [GET] 获取id获取APP
			 *
			 * **path:** /api/app/getAppById/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAppGetAppById<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'app.getApiAppGetAppById', Config>
			/**
			 * ---
			 *
			 * [GET] 分页获取所有APP
			 *
			 * **path:** /api/app/getPage
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«App信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // app描述
			 *       appDesc?: string
			 *       // app主键
			 *       appId?: number
			 *       // app名称
			 *       appName?: string
			 *       // 包名
			 *       packageName?: string
			 *       // 最新生产版本
			 *       prodVersionNewest?: string
			 *       // 最新测试版本
			 *       testVersionNewest?: string
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAppGetPage<
				Config extends Alova2MethodConfig<Result_Page_App_> & {
					params: {
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_App_, 'app.getApiAppGetPage', Config>
			/**
			 * ---
			 *
			 * [POST] 上传APP
			 *
			 * **path:** /api/app/importApp
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // app主键
			 *   appId?: number
			 *   // 文件主键
			 *   fileId?: number
			 *   // 版本号
			 *   versionCode?: string
			 *   // 版本描述
			 *   versionDesc?: string
			 *   // test测试  pro生产
			 *   versionType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiAppImportApp<
				Config extends Alova2MethodConfig<Result> & {
					data: App_2
				},
			>(
				config: Config,
			): Alova2Method<Result, 'app.postApiAppImportApp', Config>
			/**
			 * ---
			 *
			 * [POST] 保存APP
			 *
			 * **path:** /api/app/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // app描述
			 *   appDesc?: string
			 *   // app主键
			 *   appId?: number
			 *   // app名称
			 *   appName?: string
			 *   // 包名
			 *   packageName?: string
			 *   // 最新生产版本
			 *   prodVersionNewest?: string
			 *   // 最新测试版本
			 *   testVersionNewest?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiAppSave<
				Config extends Alova2MethodConfig<Result> & {
					data: App_
				},
			>(
				config: Config,
			): Alova2Method<Result, 'app.postApiAppSave', Config>
			/**
			 * ---
			 *
			 * [GET] 获取指定APP版本信息
			 *
			 * **path:** /api/appVersion/getVersion
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // app主键
			 *   appId?: number
			 *   // 版本号
			 *   versionCode?: string
			 *   // test测试  pro生产
			 *   versionType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] App版本信息
			 *   // App版本信息
			 *   data?: {
			 *     // app主键
			 *     appId?: number
			 *     // app版本主键
			 *     appVersionId?: number
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // 版本号
			 *     versionCode?: string
			 *     // 版本描述
			 *     versionDesc?: string
			 *     // test测试  prod生产
			 *     versionType?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAppVersionGetVersion<
				Config extends Alova2MethodConfig<Result_App_> & {
					params: {
						/**
						 * app主键
						 */
						appId?: number
						/**
						 * 版本号
						 */
						versionCode?: string
						/**
						 * test测试  pro生产
						 */
						versionType?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_App_, 'app.getApiAppVersionGetVersion', Config>
			/**
			 * ---
			 *
			 * [GET] 分页获取所有APP版本
			 *
			 * **path:** /api/appVersion/page
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // app主键
			 *   appId?: number
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   // test测试  pro生产
			 *   versionType?: string
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«App版本信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // app主键
			 *       appId?: number
			 *       // app版本主键
			 *       appVersionId?: number
			 *       // 创建时间
			 *       createTime?: string
			 *       // 文件主键
			 *       fileId?: number
			 *       // 版本号
			 *       versionCode?: string
			 *       // 版本描述
			 *       versionDesc?: string
			 *       // test测试  prod生产
			 *       versionType?: string
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAppVersionPage<
				Config extends Alova2MethodConfig<Result_Page_App_2> & {
					params: {
						/**
						 * app主键
						 */
						appId?: number
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						/**
						 * test测试  pro生产
						 */
						versionType?: string
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_App_2, 'app.getApiAppVersionPage', Config>
		}
		general: {
			/**
			 * ---
			 *
			 * [GET] enabled
			 *
			 * **path:** /api/authorize-code/enabled
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: boolean
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAuthorizeCodeEnabled<Config extends Alova2MethodConfig<Result_boolean_>>(
				config?: Config,
			): Alova2Method<Result_boolean_, 'general.getApiAuthorizeCodeEnabled', Config>
			/**
			 * ---
			 *
			 * [GET] get
			 *
			 * **path:** /api/authorize-code/get
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 系统授权码信息
			 *   data?: {
			 *     // 系统授权码
			 *     authorizeCode?: string
			 *     // 到期日期
			 *     expireDate?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiAuthorizeCodeGet<Config extends Alova2MethodConfig<Result_13>>(
				config?: Config,
			): Alova2Method<Result_13, 'general.getApiAuthorizeCodeGet', Config>
			/**
			 * ---
			 *
			 * [POST] set
			 *
			 * **path:** /api/authorize-code/set
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 系统授权码
			 *   authorizeCode?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 系统授权码信息
			 *   data?: {
			 *     // 系统授权码
			 *     authorizeCode?: string
			 *     // 到期日期
			 *     expireDate?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiAuthorizeCodeSet<
				Config extends Alova2MethodConfig<Result_13> & {
					data: __17
				},
			>(
				config: Config,
			): Alova2Method<Result_13, 'general.postApiAuthorizeCodeSet', Config>
			/**
			 * ---
			 *
			 * [POST] 删除码值
			 *
			 * **path:** /api/basedataNew/del/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiBasedataNewDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiBasedataNewDel', Config>
			/**
			 * ---
			 *
			 * [POST] 删除码值
			 *
			 * **path:** /api/basedataNew/delNoMenu/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiBasedataNewDelNoMenu<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiBasedataNewDelNoMenu', Config>
			/**
			 * ---
			 *
			 * [GET] 根据类型code获取码值
			 *
			 * **path:** /api/basedataNew/getBaseDataByTypeCode
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // typeCode
			 *   // [required]
			 *   typeCode: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 主键
			 *     basedataId?: number
			 *     // 码值编码
			 *     fieldCode?: string
			 *     // 码值名称
			 *     fieldName?: string
			 *     // 排序号
			 *     sortBy?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataNewGetBaseDataByTypeCode<
				Config extends Alova2MethodConfig<Result_List_10> & {
					params: {
						/**
						 * typeCode
						 * [required]
						 */
						typeCode: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_10, 'general.getApiBasedataNewGetBaseDataByTypeCode', Config>
			/**
			 * ---
			 *
			 * [GET] 码值初始化
			 *
			 * **path:** /api/basedataNew/initBaseData
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Record<string, Array<Record<string, string>>>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataNewInitBaseData<Config extends Alova2MethodConfig<Result_Map_string_List_Map_string_string_>>(
				config?: Config,
			): Alova2Method<Result_Map_string_List_Map_string_string_, 'general.getApiBasedataNewInitBaseData', Config>
			/**
			 * ---
			 *
			 * [POST] 保存码值
			 *
			 * **path:** /api/basedataNew/saveBatch
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 主键
			 *   basedataId?: number
			 *   // 码值类型外键
			 *   basedataTypeId?: number
			 *   // 码值编码
			 *   fieldCode?: string
			 *   // 码值名称
			 *   fieldName?: string
			 *   // 排序号
			 *   sortBy?: number
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiBasedataNewSaveBatch<
				Config extends Alova2MethodConfig<Result> & {
					data: _39[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiBasedataNewSaveBatch', Config>
			/**
			 * ---
			 *
			 * [POST] 保存码值（无菜单权限）
			 *
			 * **path:** /api/basedataNew/saveBatchNoMenu
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 主键
			 *   basedataId?: number
			 *   // 码值类型外键
			 *   basedataTypeId?: number
			 *   // 码值编码
			 *   fieldCode?: string
			 *   // 码值名称
			 *   fieldName?: string
			 *   // 排序号
			 *   sortBy?: number
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiBasedataNewSaveBatchNoMenu<
				Config extends Alova2MethodConfig<Result> & {
					data: _39[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiBasedataNewSaveBatchNoMenu', Config>
			/**
			 * ---
			 *
			 * [GET] 查询码值信息
			 *
			 * **path:** /api/basedataNew/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 码值数据信息
			 *   // 码值数据信息
			 *   data?: {
			 *     // 码值主键
			 *     basedataId?: number
			 *     // 码值类型外键
			 *     basedataTypeId?: number
			 *     // 码值编码
			 *     fieldCode?: string
			 *     // 码值名称
			 *     fieldName?: string
			 *     // 排序号
			 *     sortBy?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataNew<
				Config extends Alova2MethodConfig<Result_12> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_12, 'general.getApiBasedataNew', Config>
			/**
			 * ---
			 *
			 * [POST] 删除码值类别
			 *
			 * **path:** /api/basedataType/del/{basedataTypeId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // basedataTypeId
			 *   // [required]
			 *   basedataTypeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiBasedataTypeDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * basedataTypeId
						 * [required]
						 */
						basedataTypeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiBasedataTypeDel', Config>
			/**
			 * ---
			 *
			 * [GET] 查询码值列表
			 *
			 * **path:** /api/basedataType/getBaseDataList/{basedataTypeId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // basedataTypeId
			 *   // [required]
			 *   basedataTypeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 码值主键
			 *     basedataId?: number
			 *     // 码值类型外键
			 *     basedataTypeId?: number
			 *     // 码值编码
			 *     fieldCode?: string
			 *     // 码值名称
			 *     fieldName?: string
			 *     // 排序号
			 *     sortBy?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataTypeGetBaseDataList<
				Config extends Alova2MethodConfig<Result_List_9> & {
					pathParams: {
						/**
						 * basedataTypeId
						 * [required]
						 */
						basedataTypeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_9, 'general.getApiBasedataTypeGetBaseDataList', Config>
			/**
			 * ---
			 *
			 * [GET] 查询码值类别信息
			 *
			 * **path:** /api/basedataType/getById/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 父类型集合vo
			 *   // 父类型集合vo
			 *   data?: {
			 *     // 主键
			 *     basedataTypeId?: number
			 *     // 父码值主键
			 *     parentId?: number
			 *     // 码值类型编码，与父码值field_code保持一致
			 *     parentTypeCode?: string
			 *     // 码值类型名称
			 *     parentTypeName?: string
			 *     // 码值类型编码，与父码值field_code保持一致
			 *     typeCode?: string
			 *     // 码值类型名称
			 *     typeName?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataTypeGetById<
				Config extends Alova2MethodConfig<Result_vo_> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_vo_, 'general.getApiBasedataTypeGetById', Config>
			/**
			 * ---
			 *
			 * [GET] 查询码值类别信息
			 *
			 * **path:** /api/basedataType/getByTypeCode
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // typeCode
			 *   // [required]
			 *   typeCode: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 父类型集合vo
			 *   // 父类型集合vo
			 *   data?: {
			 *     // 主键
			 *     basedataTypeId?: number
			 *     // 父码值主键
			 *     parentId?: number
			 *     // 码值类型编码，与父码值field_code保持一致
			 *     parentTypeCode?: string
			 *     // 码值类型名称
			 *     parentTypeName?: string
			 *     // 码值类型编码，与父码值field_code保持一致
			 *     typeCode?: string
			 *     // 码值类型名称
			 *     typeName?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataTypeGetByTypeCode<
				Config extends Alova2MethodConfig<Result_vo_> & {
					params: {
						/**
						 * typeCode
						 * [required]
						 */
						typeCode: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_vo_, 'general.getApiBasedataTypeGetByTypeCode', Config>
			/**
			 * ---
			 *
			 * [POST] 保存码值类别
			 *
			 * **path:** /api/basedataType/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 主键
			 *   basedataTypeId?: number
			 *   // 父码值主键
			 *   parentId?: number
			 *   // 码值类型编码，与父码值field_code保持一致
			 *   typeCode?: string
			 *   // 码值类型名称
			 *   typeName?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiBasedataTypeSave<
				Config extends Alova2MethodConfig<Result> & {
					data: _42
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiBasedataTypeSave', Config>
			/**
			 * ---
			 *
			 * [GET] 分页查询码值类别
			 *
			 * **path:** /api/basedataType/typePage
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«父类型集合vo»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 主键
			 *       basedataTypeId?: number
			 *       // 父码值主键
			 *       parentId?: number
			 *       // 码值类型编码，与父码值field_code保持一致
			 *       parentTypeCode?: string
			 *       // 码值类型名称
			 *       parentTypeName?: string
			 *       // 码值类型编码，与父码值field_code保持一致
			 *       typeCode?: string
			 *       // 码值类型名称
			 *       typeName?: string
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiBasedataTypeTypePage<
				Config extends Alova2MethodConfig<Result_Page_vo_> & {
					params: {
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_vo_, 'general.getApiBasedataTypeTypePage', Config>
			/**
			 * ---
			 *
			 * [POST] 获取文件下载地址
			 *
			 * **path:** /api/file/batchGetDownloadUrl
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   ids?: number[]
			 *   networkSegment?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: string[]
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileBatchGetDownloadUrl<
				Config extends Alova2MethodConfig<Result_List_string_> & {
					data: _28
				},
			>(
				config: Config,
			): Alova2Method<Result_List_string_, 'general.postApiFileBatchGetDownloadUrl', Config>
			/**
			 * ---
			 *
			 * [POST] 批量获取文件信息
			 *
			 * **path:** /api/file/batchGetFileInfo
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileBatchGetFileInfo<
				Config extends Alova2MethodConfig<Result_List_> & {
					data: number[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_, 'general.postApiFileBatchGetFileInfo', Config>
			/**
			 * ---
			 *
			 * [POST] 设置文件标签（通过path）
			 *
			 * **path:** /api/file/batchSetFileTags
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 文件id(同时传递以id为准)
			 *   fileId?: number
			 *   // 文件路径(同时传递以id为准)
			 *   path?: string
			 *   // 标签信息
			 *   tags?: Record<string, string>
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileBatchSetFileTags<
				Config extends Alova2MethodConfig<Result> & {
					data: _48[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiFileBatchSetFileTags', Config>
			/**
			 * ---
			 *
			 * [POST] 检查文件是否存在
			 *
			 * **path:** /api/file/checkFileExist/{md5}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // md5
			 *   // [required]
			 *   md5: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: boolean
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileCheckFileExist<
				Config extends Alova2MethodConfig<Result_boolean_> & {
					pathParams: {
						/**
						 * md5
						 * [required]
						 */
						md5: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_boolean_, 'general.postApiFileCheckFileExist', Config>
			/**
			 * ---
			 *
			 * [GET] 通过文件id检查oss文件是否存在
			 *
			 * **path:** /api/file/checkFileExistByFileId
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // fileId
			 *   // [required]
			 *   fileId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: boolean
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiFileCheckFileExistByFileId<
				Config extends Alova2MethodConfig<Result_boolean_> & {
					params: {
						/**
						 * fileId
						 * [required]
						 */
						fileId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_boolean_, 'general.getApiFileCheckFileExistByFileId', Config>
			/**
			 * ---
			 *
			 * [GET] 根据path，下载文件
			 *
			 * **path:** /api/file/download
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // filePath
			 *   filePath?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiFileDownload<
				Config extends Alova2MethodConfig<unknown> & {
					params: {
						/**
						 * filePath
						 */
						filePath?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiFileDownload', Config>
			/**
			 * ---
			 *
			 * [GET] 根据id，下载文件
			 *
			 * **path:** /api/file/download/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiFileDownload1<
				Config extends Alova2MethodConfig<unknown> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiFileDownload1', Config>
			/**
			 * ---
			 *
			 * [POST] 打包目录
			 *
			 * **path:** /api/file/downloadOrZipForDir
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 文件列表
			 *   fileIds?: number[]
			 *   // 压缩包名称
			 *   zipFileName?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileDownloadOrZipForDir<
				Config extends Alova2MethodConfig<Result> & {
					data: _2
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiFileDownloadOrZipForDir', Config>
			/**
			 * ---
			 *
			 * [GET] downloadDirAndZip
			 *
			 * **path:** /api/file/downloadOrZipForDir/{zipFileName}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // zipFileName
			 *   // [required]
			 *   zipFileName: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiFileDownloadOrZipForDir<
				Config extends Alova2MethodConfig<unknown> & {
					pathParams: {
						/**
						 * zipFileName
						 * [required]
						 */
						zipFileName: string
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiFileDownloadOrZipForDir', Config>
			/**
			 * ---
			 *
			 * [POST] 文件上报（通过path上报）
			 *
			 * **path:** /api/file/fileImport
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // md5
			 *   fileMd5?: string
			 *   // 源文件名称
			 *   originName?: string
			 *   // 文件路径
			 *   path?: string
			 *   // 大小
			 *   size?: number
			 *   // tag标签
			 *   tags?: Record<string, string>
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 上传文件信息
			 *   // 上传文件信息
			 *   data?: {
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileFileImport<
				Config extends Alova2MethodConfig<Result_> & {
					data: __1
				},
			>(
				config: Config,
			): Alova2Method<Result_, 'general.postApiFileFileImport', Config>
			/**
			 * ---
			 *
			 * [GET] 通过path查询文件信息
			 *
			 * **path:** /api/file/getFileInfoByPath
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // path
			 *   // [required]
			 *   path: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 上传文件信息
			 *   // 上传文件信息
			 *   data?: {
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiFileGetFileInfoByPath<
				Config extends Alova2MethodConfig<Result_> & {
					params: {
						/**
						 * path
						 * [required]
						 */
						path: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_, 'general.getApiFileGetFileInfoByPath', Config>
			/**
			 * ---
			 *
			 * [GET] 返回文件上传地址
			 *
			 * **path:** /api/file/getUploadUrl
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // originFileName
			 *   originFileName?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 文件上传url信息
			 *   data?: {
			 *     filePath?: string
			 *     uploadUrl?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiFileGetUploadUrl<
				Config extends Alova2MethodConfig<Result_url_> & {
					params: {
						/**
						 * originFileName
						 */
						originFileName?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_url_, 'general.getApiFileGetUploadUrl', Config>
			/**
			 * ---
			 *
			 * [GET] 查询媒体文件压缩包
			 *
			 * **path:** /api/file/getZipFile
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // zipFileName
			 *   // [required]
			 *   zipFileName: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 文件信息
			 *   // 文件信息
			 *   data?: {
			 *     // 文件名称
			 *     fileName?: string
			 *     // 是否存在
			 *     isExist?: boolean
			 *     // 打包状态
			 *     packageStatus?: boolean
			 *     // 大小（字节）
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiFileGetZipFile<
				Config extends Alova2MethodConfig<Result_9> & {
					params: {
						/**
						 * zipFileName
						 * [required]
						 */
						zipFileName: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_9, 'general.getApiFileGetZipFile', Config>
			/**
			 * ---
			 *
			 * [GET] 根据path，读取文件
			 *
			 * **path:** /api/file/read
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // filePath
			 *   filePath?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiFileRead<
				Config extends Alova2MethodConfig<unknown> & {
					params: {
						/**
						 * filePath
						 */
						filePath?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiFileRead', Config>
			/**
			 * ---
			 *
			 * [POST] 文件上传保存入库
			 *
			 * **path:** /api/file/saveUpload
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   filePath?: string
			 *   originFileName?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 上传文件信息
			 *   // 上传文件信息
			 *   data?: {
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileSaveUpload<
				Config extends Alova2MethodConfig<Result_> & {
					data: _30
				},
			>(
				config: Config,
			): Alova2Method<Result_, 'general.postApiFileSaveUpload', Config>
			/**
			 * ---
			 *
			 * [POST] 设置文件标签（通过path）
			 *
			 * **path:** /api/file/setFileTags
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 文件id(同时传递以id为准)
			 *   fileId?: number
			 *   // 文件路径(同时传递以id为准)
			 *   path?: string
			 *   // 标签信息
			 *   tags?: Record<string, string>
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileSetFileTags<
				Config extends Alova2MethodConfig<Result> & {
					data: _48
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiFileSetFileTags', Config>
			/**
			 * ---
			 *
			 * [GET] 根据path，获取图片缩略图
			 *
			 * **path:** /api/file/thumbnail
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // filePath
			 *   filePath?: string
			 *   // height
			 *   height?: number
			 *   // width
			 *   width?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiFileThumbnail<
				Config extends Alova2MethodConfig<unknown> & {
					params: {
						/**
						 * filePath
						 */
						filePath?: string
						/**
						 * height
						 */
						height?: number
						/**
						 * width
						 */
						width?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiFileThumbnail', Config>
			/**
			 * ---
			 *
			 * [GET] 根据fileId，获取图片缩略图
			 *
			 * **path:** /api/file/thumbnailByFileId
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // fileId
			 *   fileId?: number
			 *   // height
			 *   height?: number
			 *   // width
			 *   width?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiFileThumbnailByFileId<
				Config extends Alova2MethodConfig<unknown> & {
					params: {
						/**
						 * fileId
						 */
						fileId?: number
						/**
						 * height
						 */
						height?: number
						/**
						 * width
						 */
						width?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiFileThumbnailByFileId', Config>
			/**
			 * ---
			 *
			 * [POST] 文件上传
			 *
			 * **path:** /api/file/upload
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // file
			 *   // [required]
			 *   file: Blob
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 上传文件信息
			 *   // 上传文件信息
			 *   data?: {
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileUpload<
				Config extends Alova2MethodConfig<Result_> & {
					data: {
						/**
						 * file
						 * [required]
						 */
						file: Blob
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_, 'general.postApiFileUpload', Config>
			/**
			 * ---
			 *
			 * [POST] 批量新增业务文件
			 *
			 * **path:** /api/fileBus/batchAddFileBus
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务id
			 *   busId?: number
			 *   // 业务文件列表
			 *   fileList?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   // 业务模块
			 *   module?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileBusBatchAddFileBus<
				Config extends Alova2MethodConfig<Result> & {
					data: _32
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiFileBusBatchAddFileBus', Config>
			/**
			 * ---
			 *
			 * [POST] 批量删除业务文件
			 *
			 * **path:** /api/fileBus/batchDelFileBus
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务id
			 *   busId?: number
			 *   // 业务文件列表
			 *   fileIds?: number[]
			 *   // 业务模块
			 *   module?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileBusBatchDelFileBus<
				Config extends Alova2MethodConfig<Result> & {
					data: __15
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiFileBusBatchDelFileBus', Config>
			/**
			 * ---
			 *
			 * [POST] 全量更新业务文件
			 *
			 * **path:** /api/fileBus/batchSaveFileBus
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务id
			 *   busId?: number
			 *   // 业务文件列表
			 *   fileList?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   // 是否物理删除历史数据
			 *   isPhysicallyRemove?: boolean
			 *   // 业务模块
			 *   module?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiFileBusBatchSaveFileBus<
				Config extends Alova2MethodConfig<Result> & {
					data: _27
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiFileBusBatchSaveFileBus', Config>
			/**
			 * ---
			 *
			 * [GET] 查询业务文件
			 *
			 * **path:** /api/fileBus/fileOneByFileBus
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // busId
			 *   // [required]
			 *   busId: number
			 *   // module
			 *   // [required]
			 *   module: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 上传文件信息
			 *   // 上传文件信息
			 *   data?: {
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiFileBusFileOneByFileBus<
				Config extends Alova2MethodConfig<Result_> & {
					params: {
						/**
						 * busId
						 * [required]
						 */
						busId: number
						/**
						 * module
						 * [required]
						 */
						module: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_, 'general.getApiFileBusFileOneByFileBus', Config>
			/**
			 * ---
			 *
			 * [GET] 查询业务文件列表
			 *
			 * **path:** /api/fileBus/listFileByFileBus
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // busId
			 *   // [required]
			 *   busId: number
			 *   // module
			 *   // [required]
			 *   module: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiFileBusListFileByFileBus<
				Config extends Alova2MethodConfig<Result_List_> & {
					params: {
						/**
						 * busId
						 * [required]
						 */
						busId: number
						/**
						 * module
						 * [required]
						 */
						module: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_, 'general.getApiFileBusListFileByFileBus', Config>
			/**
			 * ---
			 *
			 * [POST] 批量删除地理信息
			 *
			 * **path:** /api/geo/batchDelByIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoBatchDelByIds<
				Config extends Alova2MethodConfig<Result> & {
					data: number[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiGeoBatchDelByIds', Config>
			/**
			 * ---
			 *
			 * [POST] 批量查询地理信息（通过id列表查询）
			 *
			 * **path:** /api/geo/batchGetByIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 地理信息id
			 *     geoId?: number
			 *     // 地理信息
			 *     geometry?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoBatchGetByIds<
				Config extends Alova2MethodConfig<Result_List_5> & {
					data: number[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_5, 'general.postApiGeoBatchGetByIds', Config>
			/**
			 * ---
			 *
			 * [POST] 缓存批量查询地理信息（通过id列表查询）
			 *
			 * **path:** /api/geo/batchGetByIdsFromCache
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 地理信息id
			 *     geoId?: number
			 *     // 地理信息
			 *     geometry?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoBatchGetByIdsFromCache<
				Config extends Alova2MethodConfig<Result_List_5> & {
					data: number[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_5, 'general.postApiGeoBatchGetByIdsFromCache', Config>
			/**
			 * ---
			 *
			 * [POST] 删除地理信息
			 *
			 * **path:** /api/geo/del/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiGeoDel', Config>
			/**
			 * ---
			 *
			 * [POST] 查询包含地理信息
			 *
			 * **path:** /api/geo/getContainsGeoIdsForWhiteList
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务类型
			 *   busiType?: string
			 *   // 地理要素信息
			 *   geometryFeatureInfos?: Array<{
			 *     // 要素键
			 *     featureKey?: string
			 *     // 要素值
			 *     featureValue?: string
			 *   }>
			 *   // 组织id
			 *   organizationId?: string
			 *   // 地理信息（wkt）
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number[]
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoGetContainsGeoIdsForWhiteList<
				Config extends Alova2MethodConfig<Result_List_long_> & {
					data: __16
				},
			>(
				config: Config,
			): Alova2Method<Result_List_long_, 'general.postApiGeoGetContainsGeoIdsForWhiteList', Config>
			/**
			 * ---
			 *
			 * [POST] 获取最近的白名单地理信息
			 *
			 * **path:** /api/geo/getNearbyWhiteListGeoIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务类型
			 *   busiType?: string
			 *   // 附近距离
			 *   distance?: number
			 *   // 地理要素信息
			 *   geometryFeatureInfos?: Array<{
			 *     // 要素键
			 *     featureKey?: string
			 *     // 要素值
			 *     featureValue?: string
			 *   }>
			 *   // 组织id
			 *   organizationId?: string
			 *   // 地理信息（wkt）
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 地理信息id
			 *     geoId?: number
			 *     // 地理信息
			 *     geometry?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoGetNearbyWhiteListGeoIds<
				Config extends Alova2MethodConfig<Result_List_5> & {
					data: _34
				},
			>(
				config: Config,
			): Alova2Method<Result_List_5, 'general.postApiGeoGetNearbyWhiteListGeoIds', Config>
			/**
			 * ---
			 *
			 * [POST] 获取一个重复的预警结果
			 *
			 * **path:** /api/geo/getRepeatDetectionResult
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   detectionCode?: string
			 *   error?: number
			 *   jobWaylineIds?: number[]
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] RepeatDetectionResultVo
			 *   data?: {
			 *     distance?: number
			 *     isRepeat?: boolean
			 *     jobDetectionId?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoGetRepeatDetectionResult<
				Config extends Alova2MethodConfig<Result_RepeatDetectionResultVo_> & {
					data: RepeatDetectionResultParam
				},
			>(
				config: Config,
			): Alova2Method<Result_RepeatDetectionResultVo_, 'general.postApiGeoGetRepeatDetectionResult', Config>
			/**
			 * ---
			 *
			 * [POST] 查询重复地理信息
			 *
			 * **path:** /api/geo/getRepeatGeoIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务类型
			 *   busiType?: string
			 *   // 误差范围（单位m）
			 *   errorRange?: number
			 *   // 地理要素信息
			 *   geometryFeatureInfos?: Array<{
			 *     // 要素键
			 *     featureKey?: string
			 *     // 要素值
			 *     featureValue?: string
			 *   }>
			 *   // 组织id
			 *   organizationId?: string
			 *   // 地理信息（wkt）
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number[]
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoGetRepeatGeoIds<
				Config extends Alova2MethodConfig<Result_List_long_> & {
					data: _35
				},
			>(
				config: Config,
			): Alova2Method<Result_List_long_, 'general.postApiGeoGetRepeatGeoIds', Config>
			/**
			 * ---
			 *
			 * [POST] 获取一个重复的巡查结果
			 *
			 * **path:** /api/geo/getRepeatInspectResult
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   detectionCode?: string
			 *   error?: number
			 *   itemCode?: string
			 *   jobWaylineIds?: number[]
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     distance?: number
			 *     resultId?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoGetRepeatInspectResult<
				Config extends Alova2MethodConfig<Result_List_RepeatInspectResultVo_> & {
					data: RepeatInspectResultParam
				},
			>(
				config: Config,
			): Alova2Method<Result_List_RepeatInspectResultVo_, 'general.postApiGeoGetRepeatInspectResult', Config>
			/**
			 * ---
			 *
			 * [POST] 定位网格
			 *
			 * **path:** /api/geo/locateGrid
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   govRegionCode?: string
			 *   organizationId?: string
			 *   wtk?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     govRegionId?: string
			 *     skyGridCode?: string
			 *     skyGridId?: number
			 *     skyGridName?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoLocateGrid<
				Config extends Alova2MethodConfig<Result_List_LocateGridVo_> & {
					data: LocateGridParam
				},
			>(
				config: Config,
			): Alova2Method<Result_List_LocateGridVo_, 'general.postApiGeoLocateGrid', Config>
			/**
			 * ---
			 *
			 * [POST] 定位场地
			 *
			 * **path:** /api/geo/locatePlace
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   organizationId?: string
			 *   placeTypeIds?: number[]
			 *   wtk?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 场地编码
			 *     placeCode?: string
			 *     // 产地主键
			 *     placeId?: string
			 *     // 场地名称
			 *     placeName?: string
			 *     // 场地类别主键
			 *     placeTypeId?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoLocatePlace<
				Config extends Alova2MethodConfig<Result_List_8> & {
					data: LocatePlaceParam
				},
			>(
				config: Config,
			): Alova2Method<Result_List_8, 'general.postApiGeoLocatePlace', Config>
			/**
			 * ---
			 *
			 * [POST] 保存地理信息
			 *
			 * **path:** /api/geo/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务类型
			 *   busiType?: string
			 *   // 地理信息id
			 *   geoId?: number
			 *   // 地理信息
			 *   geometry?: string
			 *   // 地理要素信息
			 *   geometryFeatureInfos?: Array<{
			 *     // 要素键
			 *     featureKey?: string
			 *     // 要素名
			 *     featureName?: string
			 *     // 要素值
			 *     featureValue?: string
			 *   }>
			 *   // 是否追加要素信息
			 *   isAppend?: boolean
			 *   // 组织id
			 *   organizationId?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGeoSave<
				Config extends Alova2MethodConfig<Result_long_> & {
					data: _15
				},
			>(
				config: Config,
			): Alova2Method<Result_long_, 'general.postApiGeoSave', Config>
			/**
			 * ---
			 *
			 * [POST] 查询高层信息
			 *
			 * **path:** /api/gis2d/batchGetFeatureInfo
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gis2dId
			 *   gis2dId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[][]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number[]
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGis2dBatchGetFeatureInfo<
				Config extends Alova2MethodConfig<Result_List_double_> & {
					params: {
						/**
						 * gis2dId
						 */
						gis2dId?: number
					}
					data: number[][]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_double_, 'general.postApiGis2dBatchGetFeatureInfo', Config>
			/**
			 * ---
			 *
			 * [POST] 删除图层
			 *
			 * **path:** /api/gis2d/del/{gis2dId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // gis2dId
			 *   // [required]
			 *   gis2dId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGis2dDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * gis2dId
						 * [required]
						 */
						gis2dId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiGis2dDel', Config>
			/**
			 * ---
			 *
			 * [GET] 查询机构图层列表（组合参数查询）【AI素材下载使用】
			 *
			 * **path:** /api/gis2d/getAllList
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gis类型：1-影像 2-高程
			 *   gisType?: string
			 *   // 1-图层 2-图层组
			 *   layerType?: string
			 *   // 层级，顶级为1，一个组织只能有一个顶级节点
			 *   level?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 2维模型主键
			 *     gis2dId?: number
			 *     // gis类型：1-影像 2-高程
			 *     gisType?: string
			 *     // 1-图层 2-图层组
			 *     layerType?: string
			 *     // 层级，顶级为1，一个组织只能有一个顶级节点
			 *     level?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 父节点主键
			 *     parent2dId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务名称，对应图层标题
			 *     serviceName?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type)
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis2dGetAllList<
				Config extends Alova2MethodConfig<Result_List_3> & {
					params: {
						/**
						 * gis类型：1-影像 2-高程
						 */
						gisType?: string
						/**
						 * 1-图层 2-图层组
						 */
						layerType?: string
						/**
						 * 层级，顶级为1，一个组织只能有一个顶级节点
						 */
						level?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_3, 'general.getApiGis2dGetAllList', Config>
			/**
			 * ---
			 *
			 * [GET] 查询图层组的所有子图层
			 *
			 * **path:** /api/gis2d/getChild2d
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gis2dId
			 *   gis2dId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 2维模型主键
			 *     gis2dId?: number
			 *     // gis类型：1-影像 2-高程
			 *     gisType?: string
			 *     // 1-图层 2-图层组
			 *     layerType?: string
			 *     // 层级，顶级为1，一个组织只能有一个顶级节点
			 *     level?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 父节点主键
			 *     parent2dId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务名称，对应图层标题
			 *     serviceName?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type)
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis2dGetChild2d<
				Config extends Alova2MethodConfig<Result_List_3> & {
					params: {
						/**
						 * gis2dId
						 */
						gis2dId?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_3, 'general.getApiGis2dGetChild2d', Config>
			/**
			 * ---
			 *
			 * [GET] 查询高层信息
			 *
			 * **path:** /api/gis2d/getFeatureInfo
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gis2dId
			 *   gis2dId?: number
			 *   // lat
			 *   // [required]
			 *   lat: number
			 *   // lng
			 *   // [required]
			 *   lng: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis2dGetFeatureInfo<
				Config extends Alova2MethodConfig<Result_double_> & {
					params: {
						/**
						 * gis2dId
						 */
						gis2dId?: number
						/**
						 * lat
						 * [required]
						 */
						lat: number
						/**
						 * lng
						 * [required]
						 */
						lng: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_double_, 'general.getApiGis2dGetFeatureInfo', Config>
			/**
			 * ---
			 *
			 * [GET] 查询机构图层列表（组合参数查询）
			 *
			 * **path:** /api/gis2d/getList
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gis类型：1-影像 2-高程
			 *   gisType?: string
			 *   // 1-图层 2-图层组
			 *   layerType?: string
			 *   // 层级，顶级为1，一个组织只能有一个顶级节点
			 *   level?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 2维模型主键
			 *     gis2dId?: number
			 *     // gis类型：1-影像 2-高程
			 *     gisType?: string
			 *     // 1-图层 2-图层组
			 *     layerType?: string
			 *     // 层级，顶级为1，一个组织只能有一个顶级节点
			 *     level?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 父节点主键
			 *     parent2dId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务名称，对应图层标题
			 *     serviceName?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type)
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis2dGetList<
				Config extends Alova2MethodConfig<Result_List_3> & {
					params: {
						/**
						 * gis类型：1-影像 2-高程
						 */
						gisType?: string
						/**
						 * 1-图层 2-图层组
						 */
						layerType?: string
						/**
						 * 层级，顶级为1，一个组织只能有一个顶级节点
						 */
						level?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_3, 'general.getApiGis2dGetList', Config>
			/**
			 * ---
			 *
			 * [GET] 查询机构图层树
			 *
			 * **path:** /api/gis2d/getTree
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gisType
			 *   gisType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 子节点
			 *     childs?: Array<_9>
			 *     // 2维模型主键
			 *     gis2dId?: number
			 *     // gis类型：1-影像 2-高程
			 *     gisType?: string
			 *     // 1-图层 2-图层组
			 *     layerType?: string
			 *     // 层级，顶级为1，一个组织只能有一个顶级节点
			 *     level?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 父节点主键
			 *     parent2dId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务名称，对应图层标题
			 *     serviceName?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type)
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis2dGetTree<
				Config extends Alova2MethodConfig<Result_List_4> & {
					params: {
						/**
						 * gisType
						 */
						gisType?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_4, 'general.getApiGis2dGetTree', Config>
			/**
			 * ---
			 *
			 * [POST] 保存图层
			 *
			 * **path:** /api/gis2d/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 2维模型主键
			 *   gis2dId?: number
			 *   // gis类型：1-影像 2-高程
			 *   gisType?: string
			 *   // 1-图层 2-图层组
			 *   layerType?: string
			 *   // 最大纬度
			 *   maxLat?: number
			 *   // 最大经度
			 *   maxLng?: number
			 *   // 最小纬度
			 *   minLat?: number
			 *   // 最小经度
			 *   minLng?: number
			 *   // 父节点主键
			 *   parent2dId?: number
			 *   // 服务地址
			 *   serviceAddress?: string
			 *   // 服务描述，对应图层摘要
			 *   serviceDesc?: string
			 *   // 服务名称，对应图层标题
			 *   serviceName?: string
			 *   // 服务参数
			 *   serviceParam?: string
			 *   // 服务类别(model_service_type)
			 *   serviceType?: string
			 *   // 拍摄日期
			 *   shootDate?: string
			 *   // 瓦片目录
			 *   tileDirectory?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGis2dSave<
				Config extends Alova2MethodConfig<Result> & {
					data: _8
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiGis2dSave', Config>
			/**
			 * ---
			 *
			 * [GET] 查询图层
			 *
			 * **path:** /api/gis2d/{gis2dId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // gis2dId
			 *   // [required]
			 *   gis2dId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 图层信息_1
			 *   // 图层信息
			 *   data?: {
			 *     // 2维模型主键
			 *     gis2dId?: number
			 *     // gis类型：1-影像 2-高程
			 *     gisType?: string
			 *     // 1-图层 2-图层组
			 *     layerType?: string
			 *     // 层级，顶级为1，一个组织只能有一个顶级节点
			 *     level?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 父节点主键
			 *     parent2dId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务名称，对应图层标题
			 *     serviceName?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type)
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis2d<
				Config extends Alova2MethodConfig<Result_3> & {
					pathParams: {
						/**
						 * gis2dId
						 * [required]
						 */
						gis2dId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_3, 'general.getApiGis2d', Config>
			/**
			 * ---
			 *
			 * [POST] 删除三位模型
			 *
			 * **path:** /api/gis3d/del/{gis3dId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // gis3dId
			 *   // [required]
			 *   gis3dId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGis3dDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * gis3dId
						 * [required]
						 */
						gis3dId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiGis3dDel', Config>
			/**
			 * ---
			 *
			 * [GET] 获取三维模型（单个）
			 *
			 * **path:** /api/gis3d/getById/{gis3dId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // gis3dId
			 *   // [required]
			 *   gis3dId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 实景模型信息
			 *   // 实景模型信息
			 *   data?: {
			 *     // 创建人名称
			 *     createName?: string
			 *     // 创建时间
			 *     createTime?: string
			 *     // 模型压缩包外键
			 *     fileId?: number
			 *     // 三维模型主键
			 *     gis3dId?: number
			 *     // 是否解压完成 0否 1是
			 *     isUnzip?: boolean
			 *     // 操作人名称
			 *     operateName?: string
			 *     // 操作时间
			 *     operateTime?: string
			 *     // 实景描述
			 *     realisticDesc?: string
			 *     // 实景名称
			 *     realisticName?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis3dGetById<
				Config extends Alova2MethodConfig<Result_8> & {
					pathParams: {
						/**
						 * gis3dId
						 * [required]
						 */
						gis3dId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_8, 'general.getApiGis3dGetById', Config>
			/**
			 * ---
			 *
			 * [GET] 分页获取三维模型
			 *
			 * **path:** /api/gis3d/page
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 是否解压完成 0否 1是
			 *   isUnzip?: boolean
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«实景模型信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 创建人名称
			 *       createName?: string
			 *       // 创建时间
			 *       createTime?: string
			 *       // 模型压缩包外键
			 *       fileId?: number
			 *       // 三维模型主键
			 *       gis3dId?: number
			 *       // 是否解压完成 0否 1是
			 *       isUnzip?: boolean
			 *       // 操作人名称
			 *       operateName?: string
			 *       // 操作时间
			 *       operateTime?: string
			 *       // 实景描述
			 *       realisticDesc?: string
			 *       // 实景名称
			 *       realisticName?: string
			 *       // 拍摄日期
			 *       shootDate?: string
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiGis3dPage<
				Config extends Alova2MethodConfig<Result_Page_4> & {
					params: {
						/**
						 * 是否解压完成 0否 1是
						 */
						isUnzip?: boolean
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_4, 'general.getApiGis3dPage', Config>
			/**
			 * ---
			 *
			 * [POST] 保存三维模型
			 *
			 * **path:** /api/gis3d/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 模型压缩包外键
			 *   fileId?: number
			 *   // 三维模型主键
			 *   gis3dId?: number
			 *   // 实景描述
			 *   realisticDesc?: string
			 *   // 实景名称
			 *   realisticName?: string
			 *   // 拍摄日期
			 *   shootDate?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiGis3dSave<
				Config extends Alova2MethodConfig<Result> & {
					data: _25
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiGis3dSave', Config>
			/**
			 * ---
			 *
			 * [POST] 根据巡检项查询巡检项与场地类别的对应关系
			 *
			 * **path:** /api/item-place-type-bind/getPlaceTypeIdByItem
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   itemCodes?: string[]
			 *   organizationId?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     itemCode?: string
			 *     placeTypeId?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiItemPlaceTypeBindGetPlaceTypeIdByItem<
				Config extends Alova2MethodConfig<Result_List_ItemCodePlaceTypeVo_> & {
					data: OrgIdAndItemCodesDto
				},
			>(
				config: Config,
			): Alova2Method<Result_List_ItemCodePlaceTypeVo_, 'general.postApiItemPlaceTypeBindGetPlaceTypeIdByItem', Config>
			/**
			 * ---
			 *
			 * [GET] 根据场地返回对应的事件编码
			 *
			 * **path:** /api/item-place-type-bind/listItemCodeByPlace
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // placeId
			 *   // [required]
			 *   placeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: string[]
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiItemPlaceTypeBindListItemCodeByPlace<
				Config extends Alova2MethodConfig<Result_List_string_> & {
					params: {
						/**
						 * placeId
						 * [required]
						 */
						placeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_string_, 'general.getApiItemPlaceTypeBindListItemCodeByPlace', Config>
			/**
			 * ---
			 *
			 * [POST] 删除地标
			 *
			 * **path:** /api/landmark/del/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiLandmarkDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiLandmarkDel', Config>
			/**
			 * ---
			 *
			 * [GET] 获取地标
			 *
			 * **path:** /api/landmark/getInfoById/{id}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // id
			 *   // [required]
			 *   id: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 地标信息
			 *   // 地标信息
			 *   data?: {
			 *     // 业务类型
			 *     busiType?: string
			 *     // 相册集合
			 *     fileList?: Array<{
			 *       // 创建时间
			 *       createTime?: string
			 *       // 文件主键
			 *       fileId?: number
			 *       // md5
			 *       fileMd5?: string
			 *       // 源文件名称
			 *       originName?: string
			 *       // 文件路径
			 *       path?: string
			 *       // 大小
			 *       size?: number
			 *     }>
			 *     // 参照点位置gis
			 *     geoId?: number
			 *     // 地理信息
			 *     geometry?: string
			 *     // 地标主键
			 *     landmarkId?: number
			 *     // 主图文件外键，相册存在公共文件关系表
			 *     mainPicFileId?: number
			 *     // 参照点描述
			 *     referencePointDesc?: string
			 *     // 参照点名称
			 *     referencePointName?: string
			 *     // svg图标
			 *     svgId?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiLandmarkGetInfoById<
				Config extends Alova2MethodConfig<Result_4> & {
					pathParams: {
						/**
						 * id
						 * [required]
						 */
						id: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_4, 'general.getApiLandmarkGetInfoById', Config>
			/**
			 * ---
			 *
			 * [GET] 定位最近地标
			 *
			 * **path:** /api/landmark/landmarkLocate
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 机构id（等同于workspace id）
			 *   organizationId?: string
			 *   // 地理信息
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 地标定位信息
			 *   // 地标定位信息
			 *   data?: {
			 *     // 最近地标gis
			 *     closeGeoId?: number
			 *     // 地标距离（米）
			 *     closeLandmarkDistance?: number
			 *     // 最近地标id
			 *     closeLandmarkId?: number
			 *     // 最近地标名称
			 *     closeLandmarkName?: string
			 *     // 最近地标图标
			 *     closeLandmarkSvgId?: number
			 *     // 地理信息
			 *     geometry?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiLandmarkLandmarkLocate<
				Config extends Alova2MethodConfig<Result_5> & {
					params: {
						/**
						 * 机构id（等同于workspace id）
						 */
						organizationId?: string
						/**
						 * 地理信息
						 */
						wkt?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_5, 'general.getApiLandmarkLandmarkLocate', Config>
			/**
			 * ---
			 *
			 * [GET] 分页获取地标
			 *
			 * **path:** /api/landmark/landmarkPage
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«地标信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 业务类型
			 *       busiType?: string
			 *       // 相册集合
			 *       fileList?: Array<{
			 *         // 创建时间
			 *         createTime?: string
			 *         // 文件主键
			 *         fileId?: number
			 *         // md5
			 *         fileMd5?: string
			 *         // 源文件名称
			 *         originName?: string
			 *         // 文件路径
			 *         path?: string
			 *         // 大小
			 *         size?: number
			 *       }>
			 *       // 参照点位置gis
			 *       geoId?: number
			 *       // 地理信息
			 *       geometry?: string
			 *       // 地标主键
			 *       landmarkId?: number
			 *       // 主图文件外键，相册存在公共文件关系表
			 *       mainPicFileId?: number
			 *       // 参照点描述
			 *       referencePointDesc?: string
			 *       // 参照点名称
			 *       referencePointName?: string
			 *       // svg图标
			 *       svgId?: number
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiLandmarkLandmarkPage<
				Config extends Alova2MethodConfig<Result_Page_2> & {
					params: {
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_2, 'general.getApiLandmarkLandmarkPage', Config>
			/**
			 * ---
			 *
			 * [POST] 保存地标
			 *
			 * **path:** /api/landmark/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 相册集合
			 *   fileList?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   // 地理信息
			 *   geometry?: string
			 *   // 地标主键
			 *   landmarkId?: number
			 *   // 主图文件外键，相册存在公共文件关系表
			 *   mainPicFileId?: number
			 *   // 参照点描述
			 *   referencePointDesc?: string
			 *   // 参照点名称
			 *   referencePointName?: string
			 *   // svg图标
			 *   svgId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiLandmarkSave<
				Config extends Alova2MethodConfig<Result> & {
					data: _12
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiLandmarkSave', Config>
			/**
			 * ---
			 *
			 * [POST] 批量查询公共地图标记
			 *
			 * **path:** /api/map-mark/batchGetByIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 主键
			 *     mapMarkId?: number
			 *     // 标记信息
			 *     markJson?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiMapMarkBatchGetByIds<
				Config extends Alova2MethodConfig<Result_List_2> & {
					data: number[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_2, 'general.postApiMapMarkBatchGetByIds', Config>
			/**
			 * ---
			 *
			 * [POST] 删除公共地图标记及业务信息
			 *
			 * **path:** /api/map-mark/delByBus/{busiType}/{busId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // busId
			 *   // [required]
			 *   busId: number
			 *   // busiType
			 *   // [required]
			 *   busiType: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiMapMarkDelByBus<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * busId
						 * [required]
						 */
						busId: number
						/**
						 * busiType
						 * [required]
						 */
						busiType: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiMapMarkDelByBus', Config>
			/**
			 * ---
			 *
			 * [POST] 删除
			 *
			 * **path:** /api/map-mark/delById/{mapMarkId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // mapMarkId
			 *   // [required]
			 *   mapMarkId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiMapMarkDelById<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * mapMarkId
						 * [required]
						 */
						mapMarkId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiMapMarkDelById', Config>
			/**
			 * ---
			 *
			 * [GET] 查询列表
			 *
			 * **path:** /api/map-mark/list
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 业务类型
			 *   busiType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 主键
			 *     mapMarkId?: number
			 *     // 标记信息
			 *     markJson?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiMapMarkList<
				Config extends Alova2MethodConfig<Result_List_2> & {
					params: {
						/**
						 * 业务类型
						 */
						busiType?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_2, 'general.getApiMapMarkList', Config>
			/**
			 * ---
			 *
			 * [GET] 根据业务信息查询列表
			 *
			 * **path:** /api/map-mark/listByBus
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // busId
			 *   busId?: number
			 *   // busiType
			 *   busiType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 主键
			 *     mapMarkId?: number
			 *     // 标记信息
			 *     markJson?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiMapMarkListByBus<
				Config extends Alova2MethodConfig<Result_List_2> & {
					params: {
						/**
						 * busId
						 */
						busId?: number
						/**
						 * busiType
						 */
						busiType?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_2, 'general.getApiMapMarkListByBus', Config>
			/**
			 * ---
			 *
			 * [POST] 分页查询
			 *
			 * **path:** /api/map-mark/page
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   countId?: string
			 *   current?: number
			 *   // 关键字
			 *   keyword?: string
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   optimizeJoinOfCountSql?: boolean
			 *   orders?: Array<{
			 *     asc?: boolean
			 *     column?: string
			 *   }>
			 *   // 组织id
			 *   organizationId?: string
			 *   pages?: number
			 *   // [title] 公共地图标记查询参数信息
			 *   // 公共地图标记查询参数信息
			 *   param?: {
			 *     // 业务类型
			 *     busiType?: string
			 *   }
			 *   records?: Array<{
			 *     // 业务类型
			 *     busiType?: string
			 *     // 主键
			 *     mapMarkId?: number
			 *     // 标记信息
			 *     markJson?: string
			 *   }>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«公共地图标记信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 业务类型
			 *       busiType?: string
			 *       // 主键
			 *       mapMarkId?: number
			 *       // 标记信息
			 *       markJson?: string
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiMapMarkPage<
				Config extends Alova2MethodConfig<Result_Page_> & {
					data: _6
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_, 'general.postApiMapMarkPage', Config>
			/**
			 * ---
			 *
			 * [POST] 保存
			 *
			 * **path:** /api/map-mark/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务类型
			 *   busiType?: string
			 *   // 主键
			 *   mapMarkId?: number
			 *   // 标记信息
			 *   markJson?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiMapMarkSave<
				Config extends Alova2MethodConfig<Result_long_> & {
					data: __12
				},
			>(
				config: Config,
			): Alova2Method<Result_long_, 'general.postApiMapMarkSave', Config>
			/**
			 * ---
			 *
			 * [POST] 新增公共地图标记及业务信息
			 *
			 * **path:** /api/map-mark/saveAndBus
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 业务类型
			 *   busId?: number
			 *   // 业务类型
			 *   busiType?: string
			 *   // 标记信息
			 *   markJson?: string
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: number[]
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiMapMarkSaveAndBus<
				Config extends Alova2MethodConfig<Result_List_long_> & {
					data: _4[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_long_, 'general.postApiMapMarkSaveAndBus', Config>
			/**
			 * ---
			 *
			 * [GET] 通过id查询
			 *
			 * **path:** /api/map-mark/{mapMarkId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // mapMarkId
			 *   // [required]
			 *   mapMarkId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 公共地图标记信息
			 *   // 公共地图标记信息
			 *   data?: {
			 *     // 业务类型
			 *     busiType?: string
			 *     // 主键
			 *     mapMarkId?: number
			 *     // 标记信息
			 *     markJson?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiMapMark<
				Config extends Alova2MethodConfig<Result_2> & {
					pathParams: {
						/**
						 * mapMarkId
						 * [required]
						 */
						mapMarkId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_2, 'general.getApiMapMark', Config>
			/**
			 * ---
			 *
			 * [POST] 删除场地类型
			 *
			 * **path:** /api/place-type/del
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // placeTypeId
			 *   // [required]
			 *   placeTypeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiPlaceTypeDel<
				Config extends Alova2MethodConfig<Result> & {
					params: {
						/**
						 * placeTypeId
						 * [required]
						 */
						placeTypeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiPlaceTypeDel', Config>
			/**
			 * ---
			 *
			 * [GET] 查询场地类型详情信息（通过主键）
			 *
			 * **path:** /api/place-type/getDetailById/{placeTypeId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // placeTypeId
			 *   // [required]
			 *   placeTypeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] PlaceTypeDto
			 *   data?: {
			 *     // 事件信息
			 *     itemInfos?: Array<{
			 *       // sh事件外键
			 *       inspectItemId?: number
			 *       // 事件编码
			 *       itemCode?: string
			 *     }>
			 *     // 定位误差（米）
			 *     locateDistance?: number
			 *     // 属性定义保存信息
			 *     placeFieldDefineSaveInfos?: Array<{
			 *       // 码值类型编码，属性为下拉框时不为空
			 *       basedataTypeCode?: string
			 *       // 对象属性定义主键
			 *       fieldDefineId?: number
			 *       // 属性名称
			 *       fieldName?: string
			 *       // 属性类型：number-数字、string-字符串、select-下拉框（码值）、date-日期、time-时间、date-time-日期时间
			 *       fieldType?: string
			 *       // 是否必填，1-是 0-否
			 *       isNeed?: number
			 *       // 是否单选，1-是 0-否，属性为下拉框时不为空
			 *       isSingle?: number
			 *     }>
			 *     // 标的类别编码
			 *     placeTypeCode?: string
			 *     // 标的类别标记颜色（RGB）
			 *     placeTypeColor?: string
			 *     // 标的类别描述
			 *     placeTypeDesc?: string
			 *     // 标的类别主键
			 *     placeTypeId?: number
			 *     // 标的类别名称
			 *     placeTypeName?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiPlaceTypeGetDetailById<
				Config extends Alova2MethodConfig<Result_PlaceTypeDto_> & {
					pathParams: {
						/**
						 * placeTypeId
						 * [required]
						 */
						placeTypeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_PlaceTypeDto_, 'general.getApiPlaceTypeGetDetailById', Config>
			/**
			 * ---
			 *
			 * [GET] 分页查询
			 *
			 * **path:** /api/place-type/getPage
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] IPage«PlaceTypePageVo»
			 *   data?: {
			 *     current?: number
			 *     pages?: number
			 *     records?: Array<{
			 *       // 定位误差（米）
			 *       locateDistance?: number
			 *       // 场地数量
			 *       placeCount?: number
			 *       // 标的类别编码
			 *       placeTypeCode?: string
			 *       // 标的类别标记颜色（RGB）
			 *       placeTypeColor?: string
			 *       // 标的类别描述
			 *       placeTypeDesc?: string
			 *       // 标的类别主键
			 *       placeTypeId?: number
			 *       // 标的类别名称
			 *       placeTypeName?: string
			 *     }>
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiPlaceTypeGetPage<
				Config extends Alova2MethodConfig<Result_IPage_PlaceTypePageVo_> & {
					params: {
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_IPage_PlaceTypePageVo_, 'general.getApiPlaceTypeGetPage', Config>
			/**
			 * ---
			 *
			 * [POST] 保存场地类型
			 *
			 * **path:** /api/place-type/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 事件信息
			 *   itemInfos?: Array<{
			 *     // sh事件外键
			 *     inspectItemId?: number
			 *     // 事件编码
			 *     itemCode?: string
			 *   }>
			 *   // 定位误差（米）
			 *   locateDistance?: number
			 *   // 属性定义保存信息
			 *   placeFieldDefineSaveInfos?: Array<{
			 *     // 码值类型编码，属性为下拉框时不为空
			 *     basedataTypeCode?: string
			 *     // 对象属性定义主键
			 *     fieldDefineId?: number
			 *     // 属性名称
			 *     fieldName?: string
			 *     // 属性类型：number-数字、string-字符串、select-下拉框（码值）、date-日期、time-时间、date-time-日期时间
			 *     fieldType?: string
			 *     // 是否必填，1-是 0-否
			 *     isNeed?: number
			 *     // 是否单选，1-是 0-否，属性为下拉框时不为空
			 *     isSingle?: number
			 *   }>
			 *   // 标的类别编码
			 *   placeTypeCode?: string
			 *   // 标的类别标记颜色（RGB）
			 *   placeTypeColor?: string
			 *   // 标的类别描述
			 *   placeTypeDesc?: string
			 *   // 标的类别主键
			 *   placeTypeId?: number
			 *   // 标的类别名称
			 *   placeTypeName?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiPlaceTypeSave<
				Config extends Alova2MethodConfig<Result> & {
					data: PlaceTypeDto
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiPlaceTypeSave', Config>
			/**
			 * ---
			 *
			 * [POST] 删除场地
			 *
			 * **path:** /api/place/del
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // placeId
			 *   // [required]
			 *   placeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiPlaceDel<
				Config extends Alova2MethodConfig<Result> & {
					params: {
						/**
						 * placeId
						 * [required]
						 */
						placeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiPlaceDel', Config>
			/**
			 * ---
			 *
			 * [GET] 查询所有场地地理信息
			 *
			 * **path:** /api/place/getAllPlaceGeometry
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 边界信息GIS，存储多边形或带状线信息
			 *     geoId?: number
			 *     // 边界地理信息
			 *     geometry?: string
			 *     // 内点或圆心
			 *     inwardPointGeoId?: number
			 *     // 内点或圆心地理信息
			 *     inwardPointGeometry?: string
			 *     // 主图文件外键，相册存在公共文件关系表
			 *     mainPicFileId?: number
			 *     // 标的编码
			 *     placeCode?: string
			 *     // 标的描述
			 *     placeDesc?: string
			 *     // 场地主键
			 *     placeId?: number
			 *     // 标的名称
			 *     placeName?: string
			 *     // 对象形状，polygon-多边形 banding-带状 circle-圆形
			 *     placeShape?: string
			 *     // 标的类型外键
			 *     placeTypeId?: number
			 *     // 半径或带状宽度 (米)
			 *     width?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiPlaceGetAllPlaceGeometry<Config extends Alova2MethodConfig<Result_List_PlaceGeometryVo_>>(
				config?: Config,
			): Alova2Method<Result_List_PlaceGeometryVo_, 'general.getApiPlaceGetAllPlaceGeometry', Config>
			/**
			 * ---
			 *
			 * [GET] 查询场地详情信息（通过主键）
			 *
			 * **path:** /api/place/getDetailById/{placeId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // placeId
			 *   // [required]
			 *   placeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] PlaceDto
			 *   data?: {
			 *     // 相册集合
			 *     fileList?: Array<{
			 *       // 创建时间
			 *       createTime?: string
			 *       // 文件主键
			 *       fileId?: number
			 *       // md5
			 *       fileMd5?: string
			 *       // 源文件名称
			 *       originName?: string
			 *       // 文件路径
			 *       path?: string
			 *       // 大小
			 *       size?: number
			 *     }>
			 *     // 边界地理信息
			 *     geometry?: string
			 *     // 内点或圆心地理信息
			 *     inwardPointGeometry?: string
			 *     // 主图文件外键，相册存在公共文件关系表
			 *     mainPicFileId?: number
			 *     // 标的编码
			 *     placeCode?: string
			 *     // 标的描述
			 *     placeDesc?: string
			 *     // 属性值信息
			 *     placeFieldValueInfos?: Array<{
			 *       // 属性定义外键
			 *       fieldDefineId?: number
			 *       // 属性值
			 *       fieldValue?: string
			 *     }>
			 *     // 场地主键
			 *     placeId?: number
			 *     // 标的名称
			 *     placeName?: string
			 *     // 对象形状，polygon-多边形 banding-带状 circle-圆形
			 *     placeShape?: string
			 *     // 标的类型外键
			 *     placeTypeId?: number
			 *     // 半径或带状宽度 (米)
			 *     width?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiPlaceGetDetailById<
				Config extends Alova2MethodConfig<Result_PlaceDto_> & {
					pathParams: {
						/**
						 * placeId
						 * [required]
						 */
						placeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_PlaceDto_, 'general.getApiPlaceGetDetailById', Config>
			/**
			 * ---
			 *
			 * [POST] 分页查询
			 *
			 * **path:** /api/place/getPage
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 事件编码
			 *   'param.itemCodes'?: string[]
			 *   // 标的类别主键
			 *   'param.placeTypeId'?: number
			 *   // 边界信息GIS，存储多边形或带状线信息
			 *   'records[0].geoId'?: number
			 *   // 内点或圆心
			 *   'records[0].inwardPointGeoId'?: number
			 *   // 主图文件外键，相册存在公共文件关系表
			 *   'records[0].mainPicFileId'?: number
			 *   // 标的编码
			 *   'records[0].placeCode'?: string
			 *   // 标的描述
			 *   'records[0].placeDesc'?: string
			 *   // 场地主键
			 *   'records[0].placeId'?: number
			 *   // 标的名称
			 *   'records[0].placeName'?: string
			 *   // 对象形状，polygon-多边形 banding-带状 circle-圆形
			 *   'records[0].placeShape'?: string
			 *   // 标的类别标记颜色（RGB）
			 *   'records[0].placeTypeColor'?: string
			 *   // 标的类型外键
			 *   'records[0].placeTypeId'?: number
			 *   // 半径或带状宽度 (米)
			 *   'records[0].width'?: number
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«PlaceVo»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 边界信息GIS，存储多边形或带状线信息
			 *       geoId?: number
			 *       // 内点或圆心
			 *       inwardPointGeoId?: number
			 *       // 主图文件外键，相册存在公共文件关系表
			 *       mainPicFileId?: number
			 *       // 标的编码
			 *       placeCode?: string
			 *       // 标的描述
			 *       placeDesc?: string
			 *       // 场地主键
			 *       placeId?: number
			 *       // 标的名称
			 *       placeName?: string
			 *       // 对象形状，polygon-多边形 banding-带状 circle-圆形
			 *       placeShape?: string
			 *       // 标的类别标记颜色（RGB）
			 *       placeTypeColor?: string
			 *       // 标的类型外键
			 *       placeTypeId?: number
			 *       // 半径或带状宽度 (米)
			 *       width?: number
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiPlaceGetPage<
				Config extends Alova2MethodConfig<Result_Page_PlaceVo_> & {
					params: {
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 事件编码
						 */
						'param.itemCodes'?: string[]
						/**
						 * 标的类别主键
						 */
						'param.placeTypeId'?: number
						/**
						 * 边界信息GIS，存储多边形或带状线信息
						 */
						'records[0].geoId'?: number
						/**
						 * 内点或圆心
						 */
						'records[0].inwardPointGeoId'?: number
						/**
						 * 主图文件外键，相册存在公共文件关系表
						 */
						'records[0].mainPicFileId'?: number
						/**
						 * 标的编码
						 */
						'records[0].placeCode'?: string
						/**
						 * 标的描述
						 */
						'records[0].placeDesc'?: string
						/**
						 * 场地主键
						 */
						'records[0].placeId'?: number
						/**
						 * 标的名称
						 */
						'records[0].placeName'?: string
						/**
						 * 对象形状，polygon-多边形 banding-带状 circle-圆形
						 */
						'records[0].placeShape'?: string
						/**
						 * 标的类别标记颜色（RGB）
						 */
						'records[0].placeTypeColor'?: string
						/**
						 * 标的类型外键
						 */
						'records[0].placeTypeId'?: number
						/**
						 * 半径或带状宽度 (米)
						 */
						'records[0].width'?: number
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_PlaceVo_, 'general.postApiPlaceGetPage', Config>
			/**
			 * ---
			 *
			 * [POST] 定位场地
			 *
			 * **path:** /api/place/locatePlace
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   itemCode?: string
			 *   organizationId?: string
			 *   wkt?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] LocateNearestPlaceVo
			 *   data?: {
			 *     // 距离
			 *     distance?: number
			 *     // 定位误差（米）
			 *     locateDistance?: number
			 *     // 场地编码
			 *     placeCode?: string
			 *     // 场地id
			 *     placeId?: string
			 *     // 场地名称
			 *     placeName?: string
			 *     // 场地类别编码
			 *     placeTypeCode?: string
			 *     // 场地类别名称
			 *     placeTypeName?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiPlaceLocatePlace<
				Config extends Alova2MethodConfig<Result_LocateNearestPlaceVo_> & {
					data: LocateNearestPlaceParam
				},
			>(
				config: Config,
			): Alova2Method<Result_LocateNearestPlaceVo_, 'general.postApiPlaceLocatePlace', Config>
			/**
			 * ---
			 *
			 * [GET] 分页查询
			 *
			 * **path:** /api/place/page
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 关键字
			 *   keyword?: string
			 *   // 组织id
			 *   organizationId?: string
			 *   // 查询条件信息
			 *   param?: object
			 *   // 标的类别主键
			 *   placeTypeId?: number
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] IPage«PlacePageVo»
			 *   data?: {
			 *     current?: number
			 *     pages?: number
			 *     records?: Array<{
			 *       // 边界信息GIS，存储多边形或带状线信息
			 *       geoId?: number
			 *       // 内点或圆心
			 *       inwardPointGeoId?: number
			 *       // 主图文件外键，相册存在公共文件关系表
			 *       mainPicFileId?: number
			 *       // 标的编码
			 *       placeCode?: string
			 *       // 标的描述
			 *       placeDesc?: string
			 *       // 场地主键
			 *       placeId?: number
			 *       // 标的名称
			 *       placeName?: string
			 *       // 对象形状，polygon-多边形 banding-带状 circle-圆形
			 *       placeShape?: string
			 *       // 标的类型外键
			 *       placeTypeId?: number
			 *       // 半径或带状宽度 (米)
			 *       width?: number
			 *     }>
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiPlacePage<
				Config extends Alova2MethodConfig<Result_IPage_PlacePageVo_> & {
					params: {
						/**
						 * 关键字
						 */
						keyword?: string
						/**
						 * 组织id
						 */
						organizationId?: string
						/**
						 * 查询条件信息
						 */
						param?: object
						/**
						 * 标的类别主键
						 */
						placeTypeId?: number
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_IPage_PlacePageVo_, 'general.getApiPlacePage', Config>
			/**
			 * ---
			 *
			 * [POST] 保存场地
			 *
			 * **path:** /api/place/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 相册集合
			 *   fileList?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   // 边界地理信息
			 *   geometry?: string
			 *   // 内点或圆心地理信息
			 *   inwardPointGeometry?: string
			 *   // 主图文件外键，相册存在公共文件关系表
			 *   mainPicFileId?: number
			 *   // 标的编码
			 *   placeCode?: string
			 *   // 标的描述
			 *   placeDesc?: string
			 *   // 属性值信息
			 *   placeFieldValueInfos?: Array<{
			 *     // 属性定义外键
			 *     fieldDefineId?: number
			 *     // 属性值
			 *     fieldValue?: string
			 *   }>
			 *   // 场地主键
			 *   placeId?: number
			 *   // 标的名称
			 *   placeName?: string
			 *   // 对象形状，polygon-多边形 banding-带状 circle-圆形
			 *   placeShape?: string
			 *   // 标的类型外键
			 *   placeTypeId?: number
			 *   // 半径或带状宽度 (米)
			 *   width?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiPlaceSave<
				Config extends Alova2MethodConfig<Result> & {
					data: PlaceDto
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiPlaceSave', Config>
			/**
			 * ---
			 *
			 * [GET] 限飞区信息
			 *
			 * **path:** /api/restricted-fly-zone/getRestrictedFlyZone
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // organizationId
			 *   organizationId?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 系统设置详细信息
			 *   // 系统设置详细信息
			 *   data?: {
			 *     // 中心点
			 *     restrictedFlyZoneCenterPoint?: string
			 *     // 文件id
			 *     restrictedFlyZoneFileId?: string
			 *     // 半径
			 *     restrictedFlyZoneRadius?: string
			 *     // 更新时间
			 *     restrictedFlyZoneUpdateTime?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiRestrictedFlyZoneGetRestrictedFlyZone<
				Config extends Alova2MethodConfig<Result_15> & {
					params: {
						/**
						 * organizationId
						 */
						organizationId?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_15, 'general.getApiRestrictedFlyZoneGetRestrictedFlyZone', Config>
			/**
			 * ---
			 *
			 * [POST] 新增修改系统配置
			 *
			 * **path:** /api/setting/editSetting
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 配置编码
			 *   settingCode?: string
			 *   // 配置值
			 *   val?: string
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingEditSetting<
				Config extends Alova2MethodConfig<Result> & {
					data: _dto[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiSettingEditSetting', Config>
			/**
			 * ---
			 *
			 * [GET] 查询系统配置
			 *
			 * **path:** /api/setting/getSettingList
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSettingGetSettingList<Config extends Alova2MethodConfig<Result_Map_string_object_>>(
				config?: Config,
			): Alova2Method<Result_Map_string_object_, 'general.getApiSettingGetSettingList', Config>
			/**
			 * ---
			 *
			 * [POST] 删除地图模型
			 *
			 * **path:** /api/setting/gis-model/batchDelMapModel
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 业务id
			 *   busiId?: number
			 *   // 业务类型
			 *   busiType?: string
			 *   // 模型主键
			 *   gisModelId?: number
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelBatchDelMapModel<
				Config extends Alova2MethodConfig<Result> & {
					data: _11[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiSettingGisModelBatchDelMapModel', Config>
			/**
			 * ---
			 *
			 * [POST] 批量查询模型
			 *
			 * **path:** /api/setting/gis-model/batchGetByIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 需求单位级联ID
			 *     cascadeDeptId?: string
			 *     // 需求单位编码(other表示其他)
			 *     demandUnitCode?: string
			 *     // 需求单位名称
			 *     demandUnitName?: string
			 *     // 模型主键
			 *     gisModelId?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 模型名称
			 *     modelName?: string
			 *     // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *     modelType?: string
			 *     // 原始模型主键
			 *     originModelId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *     // 工单外键
			 *     workOrderId?: number
			 *     // 压缩包异常描述
			 *     zipErrorDesc?: string
			 *     // 上传压缩包外键
			 *     zipFileId?: number
			 *     // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *     zipFileStatus?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelBatchGetByIds<
				Config extends Alova2MethodConfig<Result_List_6> & {
					data: number[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_6, 'general.postApiSettingGisModelBatchGetByIds', Config>
			/**
			 * ---
			 *
			 * [POST] 批量保存地图模型
			 *
			 * **path:** /api/setting/gis-model/batchSaveMapModel
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = Array<{
			 *   // 业务id
			 *   busiId?: number
			 *   // 业务类型
			 *   busiType?: string
			 *   // 模型主键
			 *   gisModelId?: number
			 * }>
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelBatchSaveMapModel<
				Config extends Alova2MethodConfig<Result> & {
					data: _11[]
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiSettingGisModelBatchSaveMapModel', Config>
			/**
			 * ---
			 *
			 * [POST] 删除
			 *
			 * **path:** /api/setting/gis-model/del/{gisModelId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // gisModelId
			 *   // [required]
			 *   gisModelId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * gisModelId
						 * [required]
						 */
						gisModelId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiSettingGisModelDel', Config>
			/**
			 * ---
			 *
			 * [GET] 下载obj文件
			 *
			 * **path:** /api/setting/gis-model/downloadObj
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gisModelId
			 *   // [required]
			 *   gisModelId: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiSettingGisModelDownloadObj<
				Config extends Alova2MethodConfig<unknown> & {
					params: {
						/**
						 * gisModelId
						 * [required]
						 */
						gisModelId: string
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiSettingGisModelDownloadObj', Config>
			/**
			 * ---
			 *
			 * [GET] 下载tif文件
			 *
			 * **path:** /api/setting/gis-model/downloadTif
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // gisModelId
			 *   // [required]
			 *   gisModelId: string
			 *   // isAlt
			 *   isAlt?: boolean
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = unknown
			 * ```
			 */
			getApiSettingGisModelDownloadTif<
				Config extends Alova2MethodConfig<unknown> & {
					params: {
						/**
						 * gisModelId
						 * [required]
						 */
						gisModelId: string
						/**
						 * isAlt
						 */
						isAlt?: boolean
					}
				},
			>(
				config: Config,
			): Alova2Method<unknown, 'general.getApiSettingGisModelDownloadTif', Config>
			/**
			 * ---
			 *
			 * [GET] 通过id查询
			 *
			 * **path:** /api/setting/gis-model/getInfoById/{gisModelId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // gisModelId
			 *   // [required]
			 *   gisModelId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 地理模型信息
			 *   data?: {
			 *     // 需求单位级联ID
			 *     cascadeDeptId?: string
			 *     // 需求单位编码(other表示其他)
			 *     demandUnitCode?: string
			 *     // 需求单位名称
			 *     demandUnitName?: string
			 *     // 模型主键
			 *     gisModelId?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 模型名称
			 *     modelName?: string
			 *     // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *     modelType?: string
			 *     // 原始模型主键
			 *     originModelId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *     // 工单外键
			 *     workOrderId?: number
			 *     // 压缩包异常描述
			 *     zipErrorDesc?: string
			 *     // 上传压缩包外键
			 *     zipFileId?: number
			 *     // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *     zipFileStatus?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSettingGisModelGetInfoById<
				Config extends Alova2MethodConfig<Result_6> & {
					pathParams: {
						/**
						 * gisModelId
						 * [required]
						 */
						gisModelId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_6, 'general.getApiSettingGisModelGetInfoById', Config>
			/**
			 * ---
			 *
			 * [GET] 获取模型配置
			 *
			 * **path:** /api/setting/gis-model/getModelFileProperties
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 模型文件配置信息
			 *   // 模型文件配置信息
			 *   data?: {
			 *     // 桶名称
			 *     bucket?: string
			 *     // 2d文件路径前缀
			 *     objectKey2dPrefix?: string
			 *     // 3d文件路径前缀
			 *     objectKey3dPrefix?: string
			 *     // 高层文件路径前缀
			 *     objectKeyElevationPrefix?: string
			 *     // obj文件路径前缀
			 *     objectKeyObjPrefix?: string
			 *     // tif文件路径前缀
			 *     objectKeyTifPrefix?: string
			 *     // oss服务路径
			 *     ossEndpoint?: string
			 *     // 代理路径
			 *     proxyPath?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSettingGisModelGetModelFileProperties<Config extends Alova2MethodConfig<Result_10>>(
				config?: Config,
			): Alova2Method<Result_10, 'general.getApiSettingGisModelGetModelFileProperties', Config>
			/**
			 * ---
			 *
			 * [POST] 导入模型
			 *
			 * **path:** /api/setting/gis-model/importModel
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 模型主键
			 *   gisModelId?: number
			 *   // 模型名称
			 *   modelName?: string
			 *   // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *   modelType?: string
			 *   // 原始模型主键
			 *   originModelId?: number
			 *   // 服务描述，对应图层摘要
			 *   serviceDesc?: string
			 *   // 拍摄日期
			 *   shootDate?: string
			 *   // 工单外键
			 *   workOrderId?: number
			 *   // 上传压缩包外键
			 *   zipFileId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelImportModel<
				Config extends Alova2MethodConfig<Result> & {
					data: _20
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiSettingGisModelImportModel', Config>
			/**
			 * ---
			 *
			 * [GET] 列表查询
			 *
			 * **path:** /api/setting/gis-model/list
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 是否原始图层
			 *   isOriginModel?: boolean
			 *   // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *   modelTypes?: string[]
			 *   // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *   serviceTypes?: string[]
			 *   // 工单外键
			 *   workOrderId?: number
			 *   // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *   zipFileStatus?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 需求单位级联ID
			 *     cascadeDeptId?: string
			 *     // 需求单位编码(other表示其他)
			 *     demandUnitCode?: string
			 *     // 需求单位名称
			 *     demandUnitName?: string
			 *     // 模型主键
			 *     gisModelId?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 模型名称
			 *     modelName?: string
			 *     // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *     modelType?: string
			 *     // 原始模型主键
			 *     originModelId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *     // 工单外键
			 *     workOrderId?: number
			 *     // 压缩包异常描述
			 *     zipErrorDesc?: string
			 *     // 上传压缩包外键
			 *     zipFileId?: number
			 *     // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *     zipFileStatus?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSettingGisModelList<
				Config extends Alova2MethodConfig<Result_List_6> & {
					params: {
						/**
						 * 是否原始图层
						 */
						isOriginModel?: boolean
						/**
						 * 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
						 */
						modelTypes?: string[]
						/**
						 * 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
						 */
						serviceTypes?: string[]
						/**
						 * 工单外键
						 */
						workOrderId?: number
						/**
						 * 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
						 */
						zipFileStatus?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_6, 'general.getApiSettingGisModelList', Config>
			/**
			 * ---
			 *
			 * [GET] 地图模型列表查询
			 *
			 * **path:** /api/setting/gis-model/mapModelList
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 业务id
			 *   busiId?: number
			 *   // 业务类型
			 *   busiType?: string
			 *   // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *   modelType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 需求单位级联ID
			 *     cascadeDeptId?: string
			 *     // 需求单位编码(other表示其他)
			 *     demandUnitCode?: string
			 *     // 需求单位名称
			 *     demandUnitName?: string
			 *     // 模型主键
			 *     gisModelId?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 模型名称
			 *     modelName?: string
			 *     // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *     modelType?: string
			 *     // 原始模型主键
			 *     originModelId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *     // 工单外键
			 *     workOrderId?: number
			 *     // 压缩包异常描述
			 *     zipErrorDesc?: string
			 *     // 上传压缩包外键
			 *     zipFileId?: number
			 *     // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *     zipFileStatus?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSettingGisModelMapModelList<
				Config extends Alova2MethodConfig<Result_List_6> & {
					params: {
						/**
						 * 业务id
						 */
						busiId?: number
						/**
						 * 业务类型
						 */
						busiType?: string
						/**
						 * 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
						 */
						modelType?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_6, 'general.getApiSettingGisModelMapModelList', Config>
			/**
			 * ---
			 *
			 * [POST] 分页查询
			 *
			 * **path:** /api/setting/gis-model/page
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   countId?: string
			 *   current?: number
			 *   // 关键字
			 *   keyword?: string
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   optimizeJoinOfCountSql?: boolean
			 *   orders?: Array<{
			 *     asc?: boolean
			 *     column?: string
			 *   }>
			 *   // 组织id
			 *   organizationId?: string
			 *   pages?: number
			 *   // [title] 地理模型分页参数信息
			 *   param?: {
			 *     // 是否原始图层
			 *     isOriginModel?: boolean
			 *     // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *     modelTypes?: string[]
			 *     // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *     serviceTypes?: string[]
			 *     // 工单外键
			 *     workOrderId?: number
			 *     // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *     zipFileStatus?: string
			 *   }
			 *   records?: Array<{
			 *     // 需求单位级联ID
			 *     cascadeDeptId?: string
			 *     // 需求单位编码(other表示其他)
			 *     demandUnitCode?: string
			 *     // 需求单位名称
			 *     demandUnitName?: string
			 *     // 模型主键
			 *     gisModelId?: number
			 *     // 最大纬度
			 *     maxLat?: number
			 *     // 最大经度
			 *     maxLng?: number
			 *     // 最小纬度
			 *     minLat?: number
			 *     // 最小经度
			 *     minLng?: number
			 *     // 模型名称
			 *     modelName?: string
			 *     // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *     modelType?: string
			 *     // 原始模型主键
			 *     originModelId?: number
			 *     // 服务地址
			 *     serviceAddress?: string
			 *     // 服务描述，对应图层摘要
			 *     serviceDesc?: string
			 *     // 服务参数
			 *     serviceParam?: string
			 *     // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *     serviceType?: string
			 *     // 拍摄日期
			 *     shootDate?: string
			 *     // 瓦片目录
			 *     tileDirectory?: string
			 *     // 工单外键
			 *     workOrderId?: number
			 *     // 压缩包异常描述
			 *     zipErrorDesc?: string
			 *     // 上传压缩包外键
			 *     zipFileId?: number
			 *     // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *     zipFileStatus?: string
			 *   }>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«地理模型信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 需求单位级联ID
			 *       cascadeDeptId?: string
			 *       // 需求单位编码(other表示其他)
			 *       demandUnitCode?: string
			 *       // 需求单位名称
			 *       demandUnitName?: string
			 *       // 模型主键
			 *       gisModelId?: number
			 *       // 最大纬度
			 *       maxLat?: number
			 *       // 最大经度
			 *       maxLng?: number
			 *       // 最小纬度
			 *       minLat?: number
			 *       // 最小经度
			 *       minLng?: number
			 *       // 模型名称
			 *       modelName?: string
			 *       // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *       modelType?: string
			 *       // 原始模型主键
			 *       originModelId?: number
			 *       // 服务地址
			 *       serviceAddress?: string
			 *       // 服务描述，对应图层摘要
			 *       serviceDesc?: string
			 *       // 服务参数
			 *       serviceParam?: string
			 *       // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *       serviceType?: string
			 *       // 拍摄日期
			 *       shootDate?: string
			 *       // 瓦片目录
			 *       tileDirectory?: string
			 *       // 工单外键
			 *       workOrderId?: number
			 *       // 压缩包异常描述
			 *       zipErrorDesc?: string
			 *       // 上传压缩包外键
			 *       zipFileId?: number
			 *       // 压缩包处理状态 1-处理中、100-处理完成、99-处理异常
			 *       zipFileStatus?: string
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelPage<
				Config extends Alova2MethodConfig<Result_Page_3> & {
					data: _7
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_3, 'general.postApiSettingGisModelPage', Config>
			/**
			 * ---
			 *
			 * [POST] 保存模型
			 *
			 * **path:** /api/setting/gis-model/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 模型主键
			 *   gisModelId?: number
			 *   // 最大纬度
			 *   maxLat?: number
			 *   // 最大经度
			 *   maxLng?: number
			 *   // 最小纬度
			 *   minLat?: number
			 *   // 最小经度
			 *   minLng?: number
			 *   // 模型名称
			 *   modelName?: string
			 *   // 模型类型：2D-二维、2.5D-2.5维、3D-三维、ALT-高程
			 *   modelType?: string
			 *   // 原始模型主键
			 *   originModelId?: number
			 *   // 服务地址
			 *   serviceAddress?: string
			 *   // 服务描述，对应图层摘要
			 *   serviceDesc?: string
			 *   // 服务参数
			 *   serviceParam?: string
			 *   // 服务类别(model_service_type) 01-wms、02-wmts、03-对象存储
			 *   serviceType?: string
			 *   // 拍摄日期
			 *   shootDate?: string
			 *   // 瓦片目录
			 *   tileDirectory?: string
			 *   // 工单外键
			 *   workOrderId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSettingGisModelSave<
				Config extends Alova2MethodConfig<Result> & {
					data: _17
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiSettingGisModelSave', Config>
			/**
			 * ---
			 *
			 * [GET] 初始化系统配置
			 *
			 * **path:** /api/setting/initSetting
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // organizationId
			 *   organizationId?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSettingInitSetting<
				Config extends Alova2MethodConfig<Result_Map_string_object_> & {
					params: {
						/**
						 * organizationId
						 */
						organizationId?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Map_string_object_, 'general.getApiSettingInitSetting', Config>
			/**
			 * ---
			 *
			 * [GET] 查看详情
			 *
			 * **path:** /api/system-log/getSystemLogInfoById
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // logId
			 *   // [required]
			 *   logId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 系统日志详细信息
			 *   data?: {
			 *     // 操作人
			 *     createName?: string
			 *     // 操作时间
			 *     createTime?: string
			 *     // 异常信息
			 *     exception?: string
			 *     // 执行时间
			 *     executeTime?: number
			 *     // 主键
			 *     logId?: number
			 *     // 日志类型
			 *     logType?: string
			 *     // 操作方式
			 *     method?: string
			 *     // 操作提交的数据
			 *     params?: string
			 *     // 备注
			 *     remark?: string
			 *     // 操作IP地址
			 *     remoteAddr?: string
			 *     // 请求URI
			 *     requestUri?: string
			 *     // 日志标题
			 *     title?: string
			 *     // 用户代理
			 *     userAgent?: string
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSystemLogGetSystemLogInfoById<
				Config extends Alova2MethodConfig<Result_14> & {
					params: {
						/**
						 * logId
						 * [required]
						 */
						logId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_14, 'general.getApiSystemLogGetSystemLogInfoById', Config>
			/**
			 * ---
			 *
			 * [GET] 查询系统日志列表
			 *
			 * **path:** /api/system-log/getSystemLogList
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 操作人名称
			 *   createName?: string
			 *   // 操作时间-结束时间
			 *   createTimeEnd?: string
			 *   // 操作时间-开始时间
			 *   createTimeStart?: string
			 *   // 日志类型
			 *   logType?: string
			 *   // 操作方式
			 *   method?: string
			 *   // 请求URI
			 *   requestUri?: string
			 *   // 日志标题
			 *   title?: string
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] IPage«系统日志集合»
			 *   data?: {
			 *     current?: number
			 *     pages?: number
			 *     records?: Array<{
			 *       // 操作人
			 *       createName?: string
			 *       // 操作时间
			 *       createTime?: string
			 *       // 执行时间
			 *       executeTime?: number
			 *       // id
			 *       logId?: number
			 *       // 日志类型
			 *       logType?: string
			 *       // 操作方式
			 *       method?: string
			 *       // 操作提交的数据
			 *       params?: string
			 *       // 操作IP地址
			 *       remoteAddr?: string
			 *       // 请求URI
			 *       requestUri?: string
			 *       // 日志标题
			 *       title?: string
			 *       // 用户代理
			 *       userAgent?: string
			 *     }>
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSystemLogGetSystemLogList<
				Config extends Alova2MethodConfig<Result_IPage_> & {
					params: {
						/**
						 * 操作人名称
						 */
						createName?: string
						/**
						 * 操作时间-结束时间
						 */
						createTimeEnd?: string
						/**
						 * 操作时间-开始时间
						 */
						createTimeStart?: string
						/**
						 * 日志类型
						 */
						logType?: string
						/**
						 * 操作方式
						 */
						method?: string
						/**
						 * 请求URI
						 */
						requestUri?: string
						/**
						 * 日志标题
						 */
						title?: string
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_IPage_, 'general.getApiSystemLogGetSystemLogList', Config>
			/**
			 * ---
			 *
			 * [POST] 保存日志
			 *
			 * **path:** /api/system-log/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   createId?: number
			 *   createName?: string
			 *   createTime?: string
			 *   deptId?: number
			 *   exception?: string
			 *   executeTime?: number
			 *   isDeleted?: number
			 *   logType?: string
			 *   method?: string
			 *   params?: string
			 *   remark?: string
			 *   remoteAddr?: string
			 *   requestUri?: string
			 *   title?: string
			 *   userAgent?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = object
			 * ```
			 */
			postApiSystemLogSave<
				Config extends Alova2MethodConfig<object> & {
					data: SystemLogSaveDto
				},
			>(
				config: Config,
			): Alova2Method<object, 'general.postApiSystemLogSave', Config>
			/**
			 * ---
			 *
			 * [GET] 测试报错推送
			 *
			 * **path:** /api/test/testError
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiTestTestError<Config extends Alova2MethodConfig<Result>>(
				config?: Config,
			): Alova2Method<Result, 'general.getApiTestTestError', Config>
			/**
			 * ---
			 *
			 * [POST] 测试服务调用
			 *
			 * **path:** /api/test/testFeign
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   param1?: string
			 *   param2?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiTestTestFeign<
				Config extends Alova2MethodConfig<Result> & {
					data: TestDto
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiTestTestFeign', Config>
			/**
			 * ---
			 *
			 * [POST] 批量获取文件信息
			 *
			 * **path:** /api/uploadFile/batchGetFileInfoByPaths
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = string[]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiUploadFileBatchGetFileInfoByPaths<
				Config extends Alova2MethodConfig<Result_List_> & {
					data: string[]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_, 'general.postApiUploadFileBatchGetFileInfoByPaths', Config>
			/**
			 * ---
			 *
			 * [GET] 组合参数查询文件
			 *
			 * **path:** /api/uploadFile/getByParam
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // 文件主键
			 *   fileId?: number
			 *   // md5
			 *   fileMd5?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiUploadFileGetByParam<
				Config extends Alova2MethodConfig<Result_List_> & {
					params: {
						/**
						 * 文件主键
						 */
						fileId?: number
						/**
						 * md5
						 */
						fileMd5?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_, 'general.getApiUploadFileGetByParam', Config>
			/**
			 * ---
			 *
			 * [POST] 通过文件id删除文件
			 *
			 * **path:** /api/uploadFile/removeFileByFileId
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // fileId
			 *   // [required]
			 *   fileId: number
			 *   // isPhysicallyRemove
			 *   // [required]
			 *   isPhysicallyRemove: boolean
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiUploadFileRemoveFileByFileId<
				Config extends Alova2MethodConfig<Result> & {
					params: {
						/**
						 * fileId
						 * [required]
						 */
						fileId: number
						/**
						 * isPhysicallyRemove
						 * [required]
						 */
						isPhysicallyRemove: boolean
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiUploadFileRemoveFileByFileId', Config>
			/**
			 * ---
			 *
			 * [POST] 批量删除文件（通过文件ids）
			 *
			 * **path:** /api/uploadFile/removeFileByFileIds
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 文件id列表
			 *   fileIds?: number[]
			 *   // 是否物理删除
			 *   isPhysicallyRemove?: boolean
			 *   // path模糊查询字段
			 *   pathLikeStr?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiUploadFileRemoveFileByFileIds<
				Config extends Alova2MethodConfig<Result> & {
					data: _43
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiUploadFileRemoveFileByFileIds', Config>
			/**
			 * ---
			 *
			 * [POST] 通过path删除文件
			 *
			 * **path:** /api/uploadFile/removeFileByPath
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // isPhysicallyRemove
			 *   // [required]
			 *   isPhysicallyRemove: boolean
			 *   // path
			 *   // [required]
			 *   path: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiUploadFileRemoveFileByPath<
				Config extends Alova2MethodConfig<Result> & {
					params: {
						/**
						 * isPhysicallyRemove
						 * [required]
						 */
						isPhysicallyRemove: boolean
						/**
						 * path
						 * [required]
						 */
						path: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiUploadFileRemoveFileByPath', Config>
			/**
			 * ---
			 *
			 * [POST] 上传文件
			 *
			 * **path:** /api/uploadFile/uploadFile
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // md5
			 *   fileMd5?: string
			 *   // 源文件名称
			 *   originName?: string
			 *   // 文件路径
			 *   path?: string
			 *   // 大小
			 *   size?: number
			 *   // tag标签
			 *   tags?: Record<string, string>
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 上传文件信息
			 *   // 上传文件信息
			 *   data?: {
			 *     // 创建时间
			 *     createTime?: string
			 *     // 文件主键
			 *     fileId?: number
			 *     // md5
			 *     fileMd5?: string
			 *     // 源文件名称
			 *     originName?: string
			 *     // 文件路径
			 *     path?: string
			 *     // 大小
			 *     size?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiUploadFileUploadFile<
				Config extends Alova2MethodConfig<Result_> & {
					data: __1
				},
			>(
				config: Config,
			): Alova2Method<Result_, 'general.postApiUploadFileUploadFile', Config>
			/**
			 * ---
			 *
			 * [GET] 查询用户偏好
			 *
			 * **path:** /api/userPreferences/getByBusiType
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // busiType
			 *   // [required]
			 *   busiType: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 用户偏好设置信息
			 *   // 用户偏好设置信息
			 *   data?: {
			 *     // 业务类型
			 *     busiType?: string
			 *     // 偏好主键
			 *     preferencesId?: number
			 *     // 偏好信息
			 *     preferencesInfo?: string
			 *     // 用户外键
			 *     userId?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiUserPreferencesGetByBusiType<
				Config extends Alova2MethodConfig<Result_11> & {
					params: {
						/**
						 * busiType
						 * [required]
						 */
						busiType: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_11, 'general.getApiUserPreferencesGetByBusiType', Config>
			/**
			 * ---
			 *
			 * [POST] 保存用户偏好
			 *
			 * **path:** /api/userPreferences/save
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 业务类型
			 *   busiType?: string
			 *   // 偏好信息
			 *   preferencesInfo?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiUserPreferencesSave<
				Config extends Alova2MethodConfig<Result> & {
					data: _37
				},
			>(
				config: Config,
			): Alova2Method<Result, 'general.postApiUserPreferencesSave', Config>
		}
		geoserver: {
			/**
			 * ---
			 *
			 * [GET] checkAuthKey
			 *
			 * **path:** /api/geoserver/checkAuthKey
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // authKey
			 *   authKey?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = string
			 * ```
			 */
			getApiGeoserverCheckAuthKey<
				Config extends Alova2MethodConfig<string> & {
					params: {
						/**
						 * authKey
						 */
						authKey?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<string, 'geoserver.getApiGeoserverCheckAuthKey', Config>
			/**
			 * ---
			 *
			 * [GET] generateAuthKey
			 *
			 * **path:** /api/geoserver/generateAuthKey
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // username
			 *   username?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = string
			 * ```
			 */
			getApiGeoserverGenerateAuthKey<
				Config extends Alova2MethodConfig<string> & {
					params: {
						/**
						 * username
						 */
						username?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<string, 'geoserver.getApiGeoserverGenerateAuthKey', Config>
		}
		api: {
			/**
			 * ---
			 *
			 * [POST] 批量位置获取天气
			 *
			 * **path:** /api/qweather/batchGet
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = number[][]
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // [title] 地区或城市信息
			 *     // 地区或城市信息
			 *     location?: {
			 *       // 地区或城市所属一级行政区域
			 *       adm1?: string
			 *       // 地区或城市的上级行政区划名称
			 *       adm2?: string
			 *       // 地区或城市所属国家名称
			 *       country?: string
			 *       // 该地区的天气预报网页链接，便于嵌入你的网站或应用
			 *       fxLink?: string
			 *       // 地区或城市ID
			 *       id?: string
			 *       // 地区或城市是否当前处于夏令时。1 表示当前处于夏令时，0 表示当前不是夏令时
			 *       isDst?: string
			 *       // 地区或城市纬度
			 *       lat?: string
			 *       // 地区或城市经度
			 *       lon?: string
			 *       // 地区或城市名称
			 *       name?: string
			 *       // 地区评分
			 *       rank?: string
			 *       // 地区或城市的属性
			 *       type?: string
			 *       // 地区或城市所在时区
			 *       tz?: string
			 *       // 地区或城市目前与UTC时间偏移的小时数
			 *       utcOffset?: string
			 *     }
			 *     // [title] 城市天气结果
			 *     // 城市天气结果
			 *     weatherNow?: {
			 *       // 状态码
			 *       code?: string
			 *       // 当前数据的响应式页面，便于嵌入网站或应用
			 *       fxLink?: string
			 *       // [title] 数据信息
			 *       // 数据信息
			 *       now?: {
			 *         // 云量，百分比数值。可能为空
			 *         cloud?: string
			 *         // 露点温度。可能为空
			 *         dew?: string
			 *         // 体感温度，默认单位：摄氏度
			 *         feelsLike?: string
			 *         // 相对湿度，百分比数值
			 *         humidity?: string
			 *         // 天气状况的图标代码
			 *         icon?: string
			 *         // 数据观测时间
			 *         obsTime?: string
			 *         // 当前小时累计降水量，默认单位：毫米
			 *         precip?: string
			 *         // 大气压强，默认单位：百帕
			 *         pressure?: string
			 *         // 温度，默认单位：摄氏度
			 *         temp?: string
			 *         // 天气状况的文字描述，包括阴晴雨雪等天气状态的描述
			 *         text?: string
			 *         // 能见度，默认单位：公里
			 *         vis?: string
			 *         // 风向360角度
			 *         wind360?: string
			 *         // 风向
			 *         windDir?: string
			 *         // 风力等级
			 *         windScale?: string
			 *         // 风速，公里/小时
			 *         windSpeed?: string
			 *       }
			 *       // [title] 来源信息
			 *       // 来源信息
			 *       refer?: {
			 *         // 数据许可或版权声明，可能为空
			 *         license?: string[]
			 *         // 原始数据来源，或数据源说明，可能为空
			 *         sources?: string[]
			 *       }
			 *       // 当前API的最近更新时间
			 *       updateTime?: string
			 *     }
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiQweatherBatchGet<
				Config extends Alova2MethodConfig<Result_List_7> & {
					data: number[][]
				},
			>(
				config: Config,
			): Alova2Method<Result_List_7, 'api.postApiQweatherBatchGet', Config>
			/**
			 * ---
			 *
			 * [GET] 位置获取天气
			 *
			 * **path:** /api/qweather/get
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // lat
			 *   // [required]
			 *   lat: number
			 *   // lng
			 *   // [required]
			 *   lng: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 城市天气
			 *   // 城市天气
			 *   data?: {
			 *     // [title] 地区或城市信息
			 *     // 地区或城市信息
			 *     location?: {
			 *       // 地区或城市所属一级行政区域
			 *       adm1?: string
			 *       // 地区或城市的上级行政区划名称
			 *       adm2?: string
			 *       // 地区或城市所属国家名称
			 *       country?: string
			 *       // 该地区的天气预报网页链接，便于嵌入你的网站或应用
			 *       fxLink?: string
			 *       // 地区或城市ID
			 *       id?: string
			 *       // 地区或城市是否当前处于夏令时。1 表示当前处于夏令时，0 表示当前不是夏令时
			 *       isDst?: string
			 *       // 地区或城市纬度
			 *       lat?: string
			 *       // 地区或城市经度
			 *       lon?: string
			 *       // 地区或城市名称
			 *       name?: string
			 *       // 地区评分
			 *       rank?: string
			 *       // 地区或城市的属性
			 *       type?: string
			 *       // 地区或城市所在时区
			 *       tz?: string
			 *       // 地区或城市目前与UTC时间偏移的小时数
			 *       utcOffset?: string
			 *     }
			 *     // [title] 城市天气结果
			 *     // 城市天气结果
			 *     weatherNow?: {
			 *       // 状态码
			 *       code?: string
			 *       // 当前数据的响应式页面，便于嵌入网站或应用
			 *       fxLink?: string
			 *       // [title] 数据信息
			 *       // 数据信息
			 *       now?: {
			 *         // 云量，百分比数值。可能为空
			 *         cloud?: string
			 *         // 露点温度。可能为空
			 *         dew?: string
			 *         // 体感温度，默认单位：摄氏度
			 *         feelsLike?: string
			 *         // 相对湿度，百分比数值
			 *         humidity?: string
			 *         // 天气状况的图标代码
			 *         icon?: string
			 *         // 数据观测时间
			 *         obsTime?: string
			 *         // 当前小时累计降水量，默认单位：毫米
			 *         precip?: string
			 *         // 大气压强，默认单位：百帕
			 *         pressure?: string
			 *         // 温度，默认单位：摄氏度
			 *         temp?: string
			 *         // 天气状况的文字描述，包括阴晴雨雪等天气状态的描述
			 *         text?: string
			 *         // 能见度，默认单位：公里
			 *         vis?: string
			 *         // 风向360角度
			 *         wind360?: string
			 *         // 风向
			 *         windDir?: string
			 *         // 风力等级
			 *         windScale?: string
			 *         // 风速，公里/小时
			 *         windSpeed?: string
			 *       }
			 *       // [title] 来源信息
			 *       // 来源信息
			 *       refer?: {
			 *         // 数据许可或版权声明，可能为空
			 *         license?: string[]
			 *         // 原始数据来源，或数据源说明，可能为空
			 *         sources?: string[]
			 *       }
			 *       // 当前API的最近更新时间
			 *       updateTime?: string
			 *     }
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiQweatherGet<
				Config extends Alova2MethodConfig<Result_7> & {
					params: {
						/**
						 * lat
						 * [required]
						 */
						lat: number
						/**
						 * lng
						 * [required]
						 */
						lng: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_7, 'api.getApiQweatherGet', Config>
			/**
			 * ---
			 *
			 * [GET] 获取天气是否开启
			 *
			 * **path:** /api/qweather/isOpen
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: boolean
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiQweatherIsOpen<Config extends Alova2MethodConfig<Result_boolean_>>(
				config?: Config,
			): Alova2Method<Result_boolean_, 'api.getApiQweatherIsOpen', Config>
			/**
			 * ---
			 *
			 * [POST] 更新天气
			 *
			 * **path:** /api/qweather/update
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // lat
			 *   // [required]
			 *   lat: number
			 *   // lng
			 *   // [required]
			 *   lng: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] 城市天气
			 *   // 城市天气
			 *   data?: {
			 *     // [title] 地区或城市信息
			 *     // 地区或城市信息
			 *     location?: {
			 *       // 地区或城市所属一级行政区域
			 *       adm1?: string
			 *       // 地区或城市的上级行政区划名称
			 *       adm2?: string
			 *       // 地区或城市所属国家名称
			 *       country?: string
			 *       // 该地区的天气预报网页链接，便于嵌入你的网站或应用
			 *       fxLink?: string
			 *       // 地区或城市ID
			 *       id?: string
			 *       // 地区或城市是否当前处于夏令时。1 表示当前处于夏令时，0 表示当前不是夏令时
			 *       isDst?: string
			 *       // 地区或城市纬度
			 *       lat?: string
			 *       // 地区或城市经度
			 *       lon?: string
			 *       // 地区或城市名称
			 *       name?: string
			 *       // 地区评分
			 *       rank?: string
			 *       // 地区或城市的属性
			 *       type?: string
			 *       // 地区或城市所在时区
			 *       tz?: string
			 *       // 地区或城市目前与UTC时间偏移的小时数
			 *       utcOffset?: string
			 *     }
			 *     // [title] 城市天气结果
			 *     // 城市天气结果
			 *     weatherNow?: {
			 *       // 状态码
			 *       code?: string
			 *       // 当前数据的响应式页面，便于嵌入网站或应用
			 *       fxLink?: string
			 *       // [title] 数据信息
			 *       // 数据信息
			 *       now?: {
			 *         // 云量，百分比数值。可能为空
			 *         cloud?: string
			 *         // 露点温度。可能为空
			 *         dew?: string
			 *         // 体感温度，默认单位：摄氏度
			 *         feelsLike?: string
			 *         // 相对湿度，百分比数值
			 *         humidity?: string
			 *         // 天气状况的图标代码
			 *         icon?: string
			 *         // 数据观测时间
			 *         obsTime?: string
			 *         // 当前小时累计降水量，默认单位：毫米
			 *         precip?: string
			 *         // 大气压强，默认单位：百帕
			 *         pressure?: string
			 *         // 温度，默认单位：摄氏度
			 *         temp?: string
			 *         // 天气状况的文字描述，包括阴晴雨雪等天气状态的描述
			 *         text?: string
			 *         // 能见度，默认单位：公里
			 *         vis?: string
			 *         // 风向360角度
			 *         wind360?: string
			 *         // 风向
			 *         windDir?: string
			 *         // 风力等级
			 *         windScale?: string
			 *         // 风速，公里/小时
			 *         windSpeed?: string
			 *       }
			 *       // [title] 来源信息
			 *       // 来源信息
			 *       refer?: {
			 *         // 数据许可或版权声明，可能为空
			 *         license?: string[]
			 *         // 原始数据来源，或数据源说明，可能为空
			 *         sources?: string[]
			 *       }
			 *       // 当前API的最近更新时间
			 *       updateTime?: string
			 *     }
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiQweatherUpdate<
				Config extends Alova2MethodConfig<Result_7> & {
					params: {
						/**
						 * lat
						 * [required]
						 */
						lat: number
						/**
						 * lng
						 * [required]
						 */
						lng: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_7, 'api.postApiQweatherUpdate', Config>
		}
		svg: {
			/**
			 * ---
			 *
			 * [GET] svg详情，用于通过svgId绘制图标
			 *
			 * **path:** /api/svg/getSvgById/{svgId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // svgId
			 *   // [required]
			 *   svgId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Svg信息
			 *   // svg图标信息
			 *   data?: {
			 *     // 默认颜色
			 *     defaultColor?: string
			 *     // 默认高度
			 *     defaultHeight?: number
			 *     // 默认宽度
			 *     defaultWidth?: number
			 *     // svg主键
			 *     svgId?: number
			 *     // svg名称
			 *     svgName?: string
			 *     // svg内容path
			 *     svgPath?: string
			 *     // svg类型外键
			 *     svgTypeId?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSvgGetSvgById<
				Config extends Alova2MethodConfig<Result_Svg_> & {
					pathParams: {
						/**
						 * svgId
						 * [required]
						 */
						svgId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Svg_, 'svg.getApiSvgGetSvgById', Config>
			/**
			 * ---
			 *
			 * [GET] svg删除
			 *
			 * **path:** /api/svg/svgDel/{svgId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // svgId
			 *   // [required]
			 *   svgId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSvgSvgDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * svgId
						 * [required]
						 */
						svgId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'svg.getApiSvgSvgDel', Config>
			/**
			 * ---
			 *
			 * [POST] svg编辑
			 *
			 * **path:** /api/svg/svgEdit
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 默认颜色
			 *   defaultColor?: string
			 *   // 默认高度
			 *   defaultHeight?: number
			 *   // 默认宽度
			 *   defaultWidth?: number
			 *   // svg主键
			 *   svgId?: number
			 *   // svg名称
			 *   svgName?: string
			 *   // svg内容path
			 *   svgPath?: string
			 *   // svg类型外键
			 *   svgTypeId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSvgSvgEdit<
				Config extends Alova2MethodConfig<Result> & {
					data: Svg_
				},
			>(
				config: Config,
			): Alova2Method<Result, 'svg.postApiSvgSvgEdit', Config>
			/**
			 * ---
			 *
			 * [GET] 分页获取svg
			 *
			 * **path:** /api/svg/svgPage
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   countId?: string
			 *   current?: number
			 *   maxLimit?: number
			 *   optimizeCountSql?: boolean
			 *   'orders[0].asc'?: boolean
			 *   'orders[0].column'?: string
			 *   pages?: number
			 *   records?: Array<object>
			 *   searchCount?: boolean
			 *   size?: number
			 *   total?: number
			 *   // keyword
			 *   keyword?: string
			 *   // svgTypeId
			 *   svgTypeId?: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   // [title] Page«Svg信息»
			 *   data?: {
			 *     countId?: string
			 *     current?: number
			 *     maxLimit?: number
			 *     optimizeCountSql?: boolean
			 *     orders?: Array<{
			 *       asc?: boolean
			 *       column?: string
			 *     }>
			 *     pages?: number
			 *     records?: Array<{
			 *       // 默认颜色
			 *       defaultColor?: string
			 *       // 默认高度
			 *       defaultHeight?: number
			 *       // 默认宽度
			 *       defaultWidth?: number
			 *       // svg主键
			 *       svgId?: number
			 *       // svg名称
			 *       svgName?: string
			 *       // svg内容path
			 *       svgPath?: string
			 *       // svg类型外键
			 *       svgTypeId?: number
			 *     }>
			 *     searchCount?: boolean
			 *     size?: number
			 *     total?: number
			 *   }
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSvgSvgPage<
				Config extends Alova2MethodConfig<Result_Page_Svg_> & {
					params: {
						countId?: string
						current?: number
						maxLimit?: number
						optimizeCountSql?: boolean
						'orders[0].asc'?: boolean
						'orders[0].column'?: string
						pages?: number
						records?: Array<object>
						searchCount?: boolean
						size?: number
						total?: number
						/**
						 * keyword
						 */
						keyword?: string
						/**
						 * svgTypeId
						 */
						svgTypeId?: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_Page_Svg_, 'svg.getApiSvgSvgPage', Config>
			/**
			 * ---
			 *
			 * [GET] svg类型删除
			 *
			 * **path:** /api/svg/svgTypeDel/{svgTypeId}
			 *
			 * ---
			 *
			 * **Path Parameters**
			 * ```ts
			 * type PathParameters = {
			 *   // svgTypeId
			 *   // [required]
			 *   svgTypeId: number
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSvgSvgTypeDel<
				Config extends Alova2MethodConfig<Result> & {
					pathParams: {
						/**
						 * svgTypeId
						 * [required]
						 */
						svgTypeId: number
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'svg.getApiSvgSvgTypeDel', Config>
			/**
			 * ---
			 *
			 * [POST] svg类型编辑
			 *
			 * **path:** /api/svg/svgTypeEdit
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // svg类型主键
			 *   svgTypeId?: number
			 *   // svg类型名称
			 *   svgTypeName?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postApiSvgSvgTypeEdit<
				Config extends Alova2MethodConfig<Result> & {
					data: SvgType_
				},
			>(
				config: Config,
			): Alova2Method<Result, 'svg.postApiSvgSvgTypeEdit', Config>
			/**
			 * ---
			 *
			 * [GET] 获取svg类型集合
			 *
			 * **path:** /api/svg/svgTypeList
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // keyword
			 *   keyword?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: Array<{
			 *     // svg类型主键
			 *     svgTypeId?: number
			 *     // svg类型名称
			 *     svgTypeName?: string
			 *   }>
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getApiSvgSvgTypeList<
				Config extends Alova2MethodConfig<Result_List_SvgType_> & {
					params: {
						/**
						 * keyword
						 */
						keyword?: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result_List_SvgType_, 'svg.getApiSvgSvgTypeList', Config>
		}
		websocket: {
			/**
			 * ---
			 *
			 * [GET] 发送WebSocket消息至公共主题
			 *
			 * **path:** /sendTopic
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // destination
			 *   // [required]
			 *   destination: string
			 *   // msg
			 *   // [required]
			 *   msg: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getSendTopic<
				Config extends Alova2MethodConfig<Result> & {
					params: {
						/**
						 * destination
						 * [required]
						 */
						destination: string
						/**
						 * msg
						 * [required]
						 */
						msg: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'websocket.getSendTopic', Config>
			/**
			 * ---
			 *
			 * [GET] 发送WebSocket消息至用户主题
			 *
			 * **path:** /sendUser
			 *
			 * ---
			 *
			 * **Query Parameters**
			 * ```ts
			 * type QueryParameters = {
			 *   // destination
			 *   // [required]
			 *   destination: string
			 *   // msg
			 *   // [required]
			 *   msg: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			getSendUser<
				Config extends Alova2MethodConfig<Result> & {
					params: {
						/**
						 * destination
						 * [required]
						 */
						destination: string
						/**
						 * msg
						 * [required]
						 */
						msg: string
					}
				},
			>(
				config: Config,
			): Alova2Method<Result, 'websocket.getSendUser', Config>
			/**
			 * ---
			 *
			 * [POST] 发送WebSocket消息（通用）
			 *
			 * **path:** /sendWsMessage
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   // 发送目标主题
			 *   destination?: string
			 *   // [title] WebSocket消息信息«string»
			 *   // WebSocket消息信息
			 *   message?: {
			 *     biz_code?: string
			 *     // 消息内容
			 *     data?: string
			 *     timestamp?: number
			 *     version?: string
			 *   }
			 *   // 发送目标工作空间
			 *   organizationIds?: string[]
			 *   // 发送目标用户id
			 *   userIds?: number[]
			 *   // 发送类型
			 *   wsSendType?: string
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postSendWsMessage<
				Config extends Alova2MethodConfig<Result> & {
					data: WebSocket_string_
				},
			>(
				config: Config,
			): Alova2Method<Result, 'websocket.postSendWsMessage', Config>
			/**
			 * ---
			 *
			 * [POST] 测试json接收泛型
			 *
			 * **path:** /test
			 *
			 * ---
			 *
			 * **RequestBody**
			 * ```ts
			 * type RequestBody = {
			 *   data?: object
			 * }
			 * ```
			 *
			 * ---
			 *
			 * **Response**
			 * ```ts
			 * type Response = {
			 *   code?: number
			 *   data?: object
			 *   message?: string
			 *   msg?: string
			 *   success?: boolean
			 * }
			 * ```
			 */
			postTest<
				Config extends Alova2MethodConfig<Result> & {
					data: TestJson
				},
			>(
				config: Config,
			): Alova2Method<Result, 'websocket.postTest', Config>
		}
	}

	var BaseApis: BaseApis
}
